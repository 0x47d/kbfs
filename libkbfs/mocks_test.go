// Automatically generated by MockGen. DO NOT EDIT!
// Source: interfaces.go

package libkbfs

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	libkb "github.com/keybase/client/go/libkb"
	logger "github.com/keybase/client/go/logger"
	protocol "github.com/keybase/client/go/protocol"
	go_metrics "github.com/rcrowley/go-metrics"
	context "golang.org/x/net/context"
)

// Mock of AuthTokenRefreshHandler interface
type MockAuthTokenRefreshHandler struct {
	ctrl     *gomock.Controller
	recorder *_MockAuthTokenRefreshHandlerRecorder
}

// Recorder for MockAuthTokenRefreshHandler (not exported)
type _MockAuthTokenRefreshHandlerRecorder struct {
	mock *MockAuthTokenRefreshHandler
}

func NewMockAuthTokenRefreshHandler(ctrl *gomock.Controller) *MockAuthTokenRefreshHandler {
	mock := &MockAuthTokenRefreshHandler{ctrl: ctrl}
	mock.recorder = &_MockAuthTokenRefreshHandlerRecorder{mock}
	return mock
}

func (_m *MockAuthTokenRefreshHandler) EXPECT() *_MockAuthTokenRefreshHandlerRecorder {
	return _m.recorder
}

func (_m *MockAuthTokenRefreshHandler) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockAuthTokenRefreshHandlerRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

// Mock of Block interface
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockRecorder
}

// Recorder for MockBlock (not exported)
type _MockBlockRecorder struct {
	mock *MockBlock
}

func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &_MockBlockRecorder{mock}
	return mock
}

func (_m *MockBlock) EXPECT() *_MockBlockRecorder {
	return _m.recorder
}

func (_m *MockBlock) GetEncodedSize() uint32 {
	ret := _m.ctrl.Call(_m, "GetEncodedSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockBlockRecorder) GetEncodedSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEncodedSize")
}

func (_m *MockBlock) SetEncodedSize(size uint32) {
	_m.ctrl.Call(_m, "SetEncodedSize", size)
}

func (_mr *_MockBlockRecorder) SetEncodedSize(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEncodedSize", arg0)
}

func (_m *MockBlock) DataVersion() IFCERFTDataVer {
	ret := _m.ctrl.Call(_m, "DataVersion")
	ret0, _ := ret[0].(IFCERFTDataVer)
	return ret0
}

func (_mr *_MockBlockRecorder) DataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataVersion")
}

// Mock of NodeID interface
type MockNodeID struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeIDRecorder
}

// Recorder for MockNodeID (not exported)
type _MockNodeIDRecorder struct {
	mock *MockNodeID
}

func NewMockNodeID(ctrl *gomock.Controller) *MockNodeID {
	mock := &MockNodeID{ctrl: ctrl}
	mock.recorder = &_MockNodeIDRecorder{mock}
	return mock
}

func (_m *MockNodeID) EXPECT() *_MockNodeIDRecorder {
	return _m.recorder
}

func (_m *MockNodeID) ParentID() IFCERFTNodeID {
	ret := _m.ctrl.Call(_m, "ParentID")
	ret0, _ := ret[0].(IFCERFTNodeID)
	return ret0
}

func (_mr *_MockNodeIDRecorder) ParentID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ParentID")
}

// Mock of Node interface
type MockNode struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeRecorder
}

// Recorder for MockNode (not exported)
type _MockNodeRecorder struct {
	mock *MockNode
}

func NewMockNode(ctrl *gomock.Controller) *MockNode {
	mock := &MockNode{ctrl: ctrl}
	mock.recorder = &_MockNodeRecorder{mock}
	return mock
}

func (_m *MockNode) EXPECT() *_MockNodeRecorder {
	return _m.recorder
}

func (_m *MockNode) GetID() IFCERFTNodeID {
	ret := _m.ctrl.Call(_m, "GetID")
	ret0, _ := ret[0].(IFCERFTNodeID)
	return ret0
}

func (_mr *_MockNodeRecorder) GetID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetID")
}

func (_m *MockNode) GetFolderBranch() IFCERFTFolderBranch {
	ret := _m.ctrl.Call(_m, "GetFolderBranch")
	ret0, _ := ret[0].(IFCERFTFolderBranch)
	return ret0
}

func (_mr *_MockNodeRecorder) GetFolderBranch() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFolderBranch")
}

func (_m *MockNode) GetBasename() string {
	ret := _m.ctrl.Call(_m, "GetBasename")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockNodeRecorder) GetBasename() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBasename")
}

// Mock of KBFSOps interface
type MockKBFSOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKBFSOpsRecorder
}

// Recorder for MockKBFSOps (not exported)
type _MockKBFSOpsRecorder struct {
	mock *MockKBFSOps
}

func NewMockKBFSOps(ctrl *gomock.Controller) *MockKBFSOps {
	mock := &MockKBFSOps{ctrl: ctrl}
	mock.recorder = &_MockKBFSOpsRecorder{mock}
	return mock
}

func (_m *MockKBFSOps) EXPECT() *_MockKBFSOpsRecorder {
	return _m.recorder
}

func (_m *MockKBFSOps) GetFavorites(ctx context.Context) ([]IFCERFTFavorite, error) {
	ret := _m.ctrl.Call(_m, "GetFavorites", ctx)
	ret0, _ := ret[0].([]IFCERFTFavorite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetFavorites(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFavorites", arg0)
}

func (_m *MockKBFSOps) RefreshCachedFavorites(ctx context.Context) {
	_m.ctrl.Call(_m, "RefreshCachedFavorites", ctx)
}

func (_mr *_MockKBFSOpsRecorder) RefreshCachedFavorites(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshCachedFavorites", arg0)
}

func (_m *MockKBFSOps) AddFavorite(ctx context.Context, fav IFCERFTFavorite) error {
	ret := _m.ctrl.Call(_m, "AddFavorite", ctx, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) AddFavorite(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddFavorite", arg0, arg1)
}

func (_m *MockKBFSOps) DeleteFavorite(ctx context.Context, fav IFCERFTFavorite) error {
	ret := _m.ctrl.Call(_m, "DeleteFavorite", ctx, fav)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) DeleteFavorite(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteFavorite", arg0, arg1)
}

func (_m *MockKBFSOps) GetOrCreateRootNode(ctx context.Context, h *IFCERFTTlfHandle, branch IFCERFTBranchName) (IFCERFTNode, IFCERFTEntryInfo, error) {
	ret := _m.ctrl.Call(_m, "GetOrCreateRootNode", ctx, h, branch)
	ret0, _ := ret[0].(IFCERFTNode)
	ret1, _ := ret[1].(IFCERFTEntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) GetOrCreateRootNode(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOrCreateRootNode", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) GetDirChildren(ctx context.Context, dir IFCERFTNode) (map[string]IFCERFTEntryInfo, error) {
	ret := _m.ctrl.Call(_m, "GetDirChildren", ctx, dir)
	ret0, _ := ret[0].(map[string]IFCERFTEntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetDirChildren(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDirChildren", arg0, arg1)
}

func (_m *MockKBFSOps) Lookup(ctx context.Context, dir IFCERFTNode, name string) (IFCERFTNode, IFCERFTEntryInfo, error) {
	ret := _m.ctrl.Call(_m, "Lookup", ctx, dir, name)
	ret0, _ := ret[0].(IFCERFTNode)
	ret1, _ := ret[1].(IFCERFTEntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) Lookup(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Lookup", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Stat(ctx context.Context, node IFCERFTNode) (IFCERFTEntryInfo, error) {
	ret := _m.ctrl.Call(_m, "Stat", ctx, node)
	ret0, _ := ret[0].(IFCERFTEntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Stat(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Stat", arg0, arg1)
}

func (_m *MockKBFSOps) CreateDir(ctx context.Context, dir IFCERFTNode, name string) (IFCERFTNode, IFCERFTEntryInfo, error) {
	ret := _m.ctrl.Call(_m, "CreateDir", ctx, dir, name)
	ret0, _ := ret[0].(IFCERFTNode)
	ret1, _ := ret[1].(IFCERFTEntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDir", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) CreateFile(ctx context.Context, dir IFCERFTNode, name string, isExec bool, excl IFCERFTEXCL) (IFCERFTNode, IFCERFTEntryInfo, error) {
	ret := _m.ctrl.Call(_m, "CreateFile", ctx, dir, name, isExec, excl)
	ret0, _ := ret[0].(IFCERFTNode)
	ret1, _ := ret[1].(IFCERFTEntryInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateFile(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFile", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKBFSOps) CreateLink(ctx context.Context, dir IFCERFTNode, fromName string, toPath string) (IFCERFTEntryInfo, error) {
	ret := _m.ctrl.Call(_m, "CreateLink", ctx, dir, fromName, toPath)
	ret0, _ := ret[0].(IFCERFTEntryInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) CreateLink(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLink", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) RemoveDir(ctx context.Context, dir IFCERFTNode, dirName string) error {
	ret := _m.ctrl.Call(_m, "RemoveDir", ctx, dir, dirName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) RemoveDir(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDir", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) RemoveEntry(ctx context.Context, dir IFCERFTNode, name string) error {
	ret := _m.ctrl.Call(_m, "RemoveEntry", ctx, dir, name)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) RemoveEntry(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveEntry", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Rename(ctx context.Context, oldParent IFCERFTNode, oldName string, newParent IFCERFTNode, newName string) error {
	ret := _m.ctrl.Call(_m, "Rename", ctx, oldParent, oldName, newParent, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Rename(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKBFSOps) Read(ctx context.Context, file IFCERFTNode, dest []byte, off int64) (int64, error) {
	ret := _m.ctrl.Call(_m, "Read", ctx, file, dest, off)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Read(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) Write(ctx context.Context, file IFCERFTNode, data []byte, off int64) error {
	ret := _m.ctrl.Call(_m, "Write", ctx, file, data, off)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Write(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) Truncate(ctx context.Context, file IFCERFTNode, size uint64) error {
	ret := _m.ctrl.Call(_m, "Truncate", ctx, file, size)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Truncate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) SetEx(ctx context.Context, file IFCERFTNode, ex bool) error {
	ret := _m.ctrl.Call(_m, "SetEx", ctx, file, ex)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SetEx(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEx", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) SetMtime(ctx context.Context, file IFCERFTNode, mtime *time.Time) error {
	ret := _m.ctrl.Call(_m, "SetMtime", ctx, file, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SetMtime(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMtime", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Sync(ctx context.Context, file IFCERFTNode) error {
	ret := _m.ctrl.Call(_m, "Sync", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Sync(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sync", arg0, arg1)
}

func (_m *MockKBFSOps) FolderStatus(ctx context.Context, folderBranch IFCERFTFolderBranch) (IFCERFTFolderBranchStatus, <-chan IFCERFTStatusUpdate, error) {
	ret := _m.ctrl.Call(_m, "FolderStatus", ctx, folderBranch)
	ret0, _ := ret[0].(IFCERFTFolderBranchStatus)
	ret1, _ := ret[1].(<-chan IFCERFTStatusUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) FolderStatus(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FolderStatus", arg0, arg1)
}

func (_m *MockKBFSOps) Status(ctx context.Context) (KBFSStatus, <-chan IFCERFTStatusUpdate, error) {
	ret := _m.ctrl.Call(_m, "Status", ctx)
	ret0, _ := ret[0].(KBFSStatus)
	ret1, _ := ret[1].(<-chan IFCERFTStatusUpdate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) Status(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Status", arg0)
}

func (_m *MockKBFSOps) UnstageForTesting(ctx context.Context, folderBranch IFCERFTFolderBranch) error {
	ret := _m.ctrl.Call(_m, "UnstageForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) UnstageForTesting(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnstageForTesting", arg0, arg1)
}

func (_m *MockKBFSOps) Rekey(ctx context.Context, id IFCERFTTlfID) error {
	ret := _m.ctrl.Call(_m, "Rekey", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Rekey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rekey", arg0, arg1)
}

func (_m *MockKBFSOps) SyncFromServerForTesting(ctx context.Context, folderBranch IFCERFTFolderBranch) error {
	ret := _m.ctrl.Call(_m, "SyncFromServerForTesting", ctx, folderBranch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) SyncFromServerForTesting(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncFromServerForTesting", arg0, arg1)
}

func (_m *MockKBFSOps) GetUpdateHistory(ctx context.Context, folderBranch IFCERFTFolderBranch) (IFCERFTTLFUpdateHistory, error) {
	ret := _m.ctrl.Call(_m, "GetUpdateHistory", ctx, folderBranch)
	ret0, _ := ret[0].(IFCERFTTLFUpdateHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetUpdateHistory(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUpdateHistory", arg0, arg1)
}

func (_m *MockKBFSOps) Shutdown() error {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockKBFSOps) PushConnectionStatusChange(service string, newStatus error) {
	_m.ctrl.Call(_m, "PushConnectionStatusChange", service, newStatus)
}

func (_mr *_MockKBFSOpsRecorder) PushConnectionStatusChange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PushConnectionStatusChange", arg0, arg1)
}

// Mock of KeybaseDaemon interface
type MockKeybaseDaemon struct {
	ctrl     *gomock.Controller
	recorder *_MockKeybaseDaemonRecorder
}

// Recorder for MockKeybaseDaemon (not exported)
type _MockKeybaseDaemonRecorder struct {
	mock *MockKeybaseDaemon
}

func NewMockKeybaseDaemon(ctrl *gomock.Controller) *MockKeybaseDaemon {
	mock := &MockKeybaseDaemon{ctrl: ctrl}
	mock.recorder = &_MockKeybaseDaemonRecorder{mock}
	return mock
}

func (_m *MockKeybaseDaemon) EXPECT() *_MockKeybaseDaemonRecorder {
	return _m.recorder
}

func (_m *MockKeybaseDaemon) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, protocol.UID, error) {
	ret := _m.ctrl.Call(_m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(protocol.UID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKeybaseDaemonRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0, arg1)
}

func (_m *MockKeybaseDaemon) Identify(ctx context.Context, assertion string, reason string) (IFCERFTUserInfo, error) {
	ret := _m.ctrl.Call(_m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(IFCERFTUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) Identify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identify", arg0, arg1, arg2)
}

func (_m *MockKeybaseDaemon) LoadUserPlusKeys(ctx context.Context, uid protocol.UID) (IFCERFTUserInfo, error) {
	ret := _m.ctrl.Call(_m, "LoadUserPlusKeys", ctx, uid)
	ret0, _ := ret[0].(IFCERFTUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) LoadUserPlusKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadUserPlusKeys", arg0, arg1)
}

func (_m *MockKeybaseDaemon) LoadUnverifiedKeys(ctx context.Context, uid protocol.UID) ([]IFCERFTVerifyingKey, []IFCERFTCryptPublicKey, error) {
	ret := _m.ctrl.Call(_m, "LoadUnverifiedKeys", ctx, uid)
	ret0, _ := ret[0].([]IFCERFTVerifyingKey)
	ret1, _ := ret[1].([]IFCERFTCryptPublicKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKeybaseDaemonRecorder) LoadUnverifiedKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadUnverifiedKeys", arg0, arg1)
}

func (_m *MockKeybaseDaemon) CurrentSession(ctx context.Context, sessionID int) (IFCERFTSessionInfo, error) {
	ret := _m.ctrl.Call(_m, "CurrentSession", ctx, sessionID)
	ret0, _ := ret[0].(IFCERFTSessionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) CurrentSession(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CurrentSession", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FavoriteAdd(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseDaemonRecorder) FavoriteAdd(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteAdd", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FavoriteDelete(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseDaemonRecorder) FavoriteDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteDelete", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FavoriteList(ctx context.Context, sessionID int) ([]protocol.Folder, error) {
	ret := _m.ctrl.Call(_m, "FavoriteList", ctx, sessionID)
	ret0, _ := ret[0].([]protocol.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeybaseDaemonRecorder) FavoriteList(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteList", arg0, arg1)
}

func (_m *MockKeybaseDaemon) Notify(ctx context.Context, notification *protocol.FSNotification) error {
	ret := _m.ctrl.Call(_m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeybaseDaemonRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FlushUserFromLocalCache(ctx context.Context, uid protocol.UID) {
	_m.ctrl.Call(_m, "FlushUserFromLocalCache", ctx, uid)
}

func (_mr *_MockKeybaseDaemonRecorder) FlushUserFromLocalCache(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushUserFromLocalCache", arg0, arg1)
}

func (_m *MockKeybaseDaemon) FlushUserUnverifiedKeysFromLocalCache(ctx context.Context, uid protocol.UID) {
	_m.ctrl.Call(_m, "FlushUserUnverifiedKeysFromLocalCache", ctx, uid)
}

func (_mr *_MockKeybaseDaemonRecorder) FlushUserUnverifiedKeysFromLocalCache(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FlushUserUnverifiedKeysFromLocalCache", arg0, arg1)
}

func (_m *MockKeybaseDaemon) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockKeybaseDaemonRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of resolver interface
type Mockresolver struct {
	ctrl     *gomock.Controller
	recorder *_MockresolverRecorder
}

// Recorder for Mockresolver (not exported)
type _MockresolverRecorder struct {
	mock *Mockresolver
}

func NewMockresolver(ctrl *gomock.Controller) *Mockresolver {
	mock := &Mockresolver{ctrl: ctrl}
	mock.recorder = &_MockresolverRecorder{mock}
	return mock
}

func (_m *Mockresolver) EXPECT() *_MockresolverRecorder {
	return _m.recorder
}

func (_m *Mockresolver) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, protocol.UID, error) {
	ret := _m.ctrl.Call(_m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(protocol.UID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockresolverRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0, arg1)
}

// Mock of identifier interface
type Mockidentifier struct {
	ctrl     *gomock.Controller
	recorder *_MockidentifierRecorder
}

// Recorder for Mockidentifier (not exported)
type _MockidentifierRecorder struct {
	mock *Mockidentifier
}

func NewMockidentifier(ctrl *gomock.Controller) *Mockidentifier {
	mock := &Mockidentifier{ctrl: ctrl}
	mock.recorder = &_MockidentifierRecorder{mock}
	return mock
}

func (_m *Mockidentifier) EXPECT() *_MockidentifierRecorder {
	return _m.recorder
}

func (_m *Mockidentifier) Identify(ctx context.Context, assertion string, reason string) (IFCERFTUserInfo, error) {
	ret := _m.ctrl.Call(_m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(IFCERFTUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockidentifierRecorder) Identify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identify", arg0, arg1, arg2)
}

// Mock of normalizedUsernameGetter interface
type MocknormalizedUsernameGetter struct {
	ctrl     *gomock.Controller
	recorder *_MocknormalizedUsernameGetterRecorder
}

// Recorder for MocknormalizedUsernameGetter (not exported)
type _MocknormalizedUsernameGetterRecorder struct {
	mock *MocknormalizedUsernameGetter
}

func NewMocknormalizedUsernameGetter(ctrl *gomock.Controller) *MocknormalizedUsernameGetter {
	mock := &MocknormalizedUsernameGetter{ctrl: ctrl}
	mock.recorder = &_MocknormalizedUsernameGetterRecorder{mock}
	return mock
}

func (_m *MocknormalizedUsernameGetter) EXPECT() *_MocknormalizedUsernameGetterRecorder {
	return _m.recorder
}

func (_m *MocknormalizedUsernameGetter) GetNormalizedUsername(ctx context.Context, uid protocol.UID) (libkb.NormalizedUsername, error) {
	ret := _m.ctrl.Call(_m, "GetNormalizedUsername", ctx, uid)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MocknormalizedUsernameGetterRecorder) GetNormalizedUsername(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNormalizedUsername", arg0, arg1)
}

// Mock of KBPKI interface
type MockKBPKI struct {
	ctrl     *gomock.Controller
	recorder *_MockKBPKIRecorder
}

// Recorder for MockKBPKI (not exported)
type _MockKBPKIRecorder struct {
	mock *MockKBPKI
}

func NewMockKBPKI(ctrl *gomock.Controller) *MockKBPKI {
	mock := &MockKBPKI{ctrl: ctrl}
	mock.recorder = &_MockKBPKIRecorder{mock}
	return mock
}

func (_m *MockKBPKI) EXPECT() *_MockKBPKIRecorder {
	return _m.recorder
}

func (_m *MockKBPKI) GetCurrentToken(ctx context.Context) (string, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentToken", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentToken", arg0)
}

func (_m *MockKBPKI) GetCurrentUserInfo(ctx context.Context) (libkb.NormalizedUsername, protocol.UID, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentUserInfo", ctx)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(protocol.UID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBPKIRecorder) GetCurrentUserInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentUserInfo", arg0)
}

func (_m *MockKBPKI) GetCurrentCryptPublicKey(ctx context.Context) (IFCERFTCryptPublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentCryptPublicKey", ctx)
	ret0, _ := ret[0].(IFCERFTCryptPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentCryptPublicKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentCryptPublicKey", arg0)
}

func (_m *MockKBPKI) GetCurrentVerifyingKey(ctx context.Context) (IFCERFTVerifyingKey, error) {
	ret := _m.ctrl.Call(_m, "GetCurrentVerifyingKey", ctx)
	ret0, _ := ret[0].(IFCERFTVerifyingKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCurrentVerifyingKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCurrentVerifyingKey", arg0)
}

func (_m *MockKBPKI) Resolve(ctx context.Context, assertion string) (libkb.NormalizedUsername, protocol.UID, error) {
	ret := _m.ctrl.Call(_m, "Resolve", ctx, assertion)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(protocol.UID)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBPKIRecorder) Resolve(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resolve", arg0, arg1)
}

func (_m *MockKBPKI) Identify(ctx context.Context, assertion string, reason string) (IFCERFTUserInfo, error) {
	ret := _m.ctrl.Call(_m, "Identify", ctx, assertion, reason)
	ret0, _ := ret[0].(IFCERFTUserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) Identify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Identify", arg0, arg1, arg2)
}

func (_m *MockKBPKI) GetNormalizedUsername(ctx context.Context, uid protocol.UID) (libkb.NormalizedUsername, error) {
	ret := _m.ctrl.Call(_m, "GetNormalizedUsername", ctx, uid)
	ret0, _ := ret[0].(libkb.NormalizedUsername)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetNormalizedUsername(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNormalizedUsername", arg0, arg1)
}

func (_m *MockKBPKI) HasVerifyingKey(ctx context.Context, uid protocol.UID, verifyingKey IFCERFTVerifyingKey, atServerTime time.Time) error {
	ret := _m.ctrl.Call(_m, "HasVerifyingKey", ctx, uid, verifyingKey, atServerTime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) HasVerifyingKey(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasVerifyingKey", arg0, arg1, arg2, arg3)
}

func (_m *MockKBPKI) HasUnverifiedVerifyingKey(ctx context.Context, uid protocol.UID, verifyingKey IFCERFTVerifyingKey) error {
	ret := _m.ctrl.Call(_m, "HasUnverifiedVerifyingKey", ctx, uid, verifyingKey)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) HasUnverifiedVerifyingKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HasUnverifiedVerifyingKey", arg0, arg1, arg2)
}

func (_m *MockKBPKI) GetCryptPublicKeys(ctx context.Context, uid protocol.UID) ([]IFCERFTCryptPublicKey, error) {
	ret := _m.ctrl.Call(_m, "GetCryptPublicKeys", ctx, uid)
	ret0, _ := ret[0].([]IFCERFTCryptPublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetCryptPublicKeys(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCryptPublicKeys", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteAdd(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteAdd", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) FavoriteAdd(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteAdd", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteDelete(ctx context.Context, folder protocol.Folder) error {
	ret := _m.ctrl.Call(_m, "FavoriteDelete", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) FavoriteDelete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteDelete", arg0, arg1)
}

func (_m *MockKBPKI) FavoriteList(ctx context.Context) ([]protocol.Folder, error) {
	ret := _m.ctrl.Call(_m, "FavoriteList", ctx)
	ret0, _ := ret[0].([]protocol.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) FavoriteList(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FavoriteList", arg0)
}

func (_m *MockKBPKI) Notify(ctx context.Context, notification *protocol.FSNotification) error {
	ret := _m.ctrl.Call(_m, "Notify", ctx, notification)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBPKIRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1)
}

// Mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyManagerRecorder
}

// Recorder for MockKeyManager (not exported)
type _MockKeyManagerRecorder struct {
	mock *MockKeyManager
}

func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &_MockKeyManagerRecorder{mock}
	return mock
}

func (_m *MockKeyManager) EXPECT() *_MockKeyManagerRecorder {
	return _m.recorder
}

func (_m *MockKeyManager) GetTLFCryptKeyForEncryption(ctx context.Context, md *IFCERFTRootMetadata) (IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForEncryption", ctx, md)
	ret0, _ := ret[0].(IFCERFTTLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForEncryption(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForEncryption", arg0, arg1)
}

func (_m *MockKeyManager) GetTLFCryptKeyForMDDecryption(ctx context.Context, mdToDecrypt *IFCERFTRootMetadata, mdWithKeys *IFCERFTRootMetadata) (IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForMDDecryption", ctx, mdToDecrypt, mdWithKeys)
	ret0, _ := ret[0].(IFCERFTTLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForMDDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForMDDecryption", arg0, arg1, arg2)
}

func (_m *MockKeyManager) GetTLFCryptKeyForBlockDecryption(ctx context.Context, md *IFCERFTRootMetadata, blockPtr IFCERFTBlockPointer) (IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyForBlockDecryption", ctx, md, blockPtr)
	ret0, _ := ret[0].(IFCERFTTLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetTLFCryptKeyForBlockDecryption(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyForBlockDecryption", arg0, arg1, arg2)
}

func (_m *MockKeyManager) Rekey(ctx context.Context, md *IFCERFTRootMetadata, promptPaper bool) (bool, *IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "Rekey", ctx, md, promptPaper)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*IFCERFTTLFCryptKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKeyManagerRecorder) Rekey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rekey", arg0, arg1, arg2)
}

// Mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *_MockReporterRecorder
}

// Recorder for MockReporter (not exported)
type _MockReporterRecorder struct {
	mock *MockReporter
}

func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &_MockReporterRecorder{mock}
	return mock
}

func (_m *MockReporter) EXPECT() *_MockReporterRecorder {
	return _m.recorder
}

func (_m *MockReporter) ReportErr(ctx context.Context, tlfName IFCERFTCanonicalTlfName, public bool, mode IFCERFTErrorModeType, err error) {
	_m.ctrl.Call(_m, "ReportErr", ctx, tlfName, public, mode, err)
}

func (_mr *_MockReporterRecorder) ReportErr(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReportErr", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockReporter) AllKnownErrors() []ReportedError {
	ret := _m.ctrl.Call(_m, "AllKnownErrors")
	ret0, _ := ret[0].([]ReportedError)
	return ret0
}

func (_mr *_MockReporterRecorder) AllKnownErrors() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllKnownErrors")
}

func (_m *MockReporter) Notify(ctx context.Context, notification *protocol.FSNotification) {
	_m.ctrl.Call(_m, "Notify", ctx, notification)
}

func (_mr *_MockReporterRecorder) Notify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notify", arg0, arg1)
}

func (_m *MockReporter) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockReporterRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of MDCache interface
type MockMDCache struct {
	ctrl     *gomock.Controller
	recorder *_MockMDCacheRecorder
}

// Recorder for MockMDCache (not exported)
type _MockMDCacheRecorder struct {
	mock *MockMDCache
}

func NewMockMDCache(ctrl *gomock.Controller) *MockMDCache {
	mock := &MockMDCache{ctrl: ctrl}
	mock.recorder = &_MockMDCacheRecorder{mock}
	return mock
}

func (_m *MockMDCache) EXPECT() *_MockMDCacheRecorder {
	return _m.recorder
}

func (_m *MockMDCache) Get(tlf IFCERFTTlfID, rev IFCERFTMetadataRevision, bid IFCERFTBranchID) (*IFCERFTRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "Get", tlf, rev, bid)
	ret0, _ := ret[0].(*IFCERFTRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDCacheRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2)
}

func (_m *MockMDCache) Put(md *IFCERFTRootMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", md)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDCacheRecorder) Put(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0)
}

// Mock of KeyCache interface
type MockKeyCache struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyCacheRecorder
}

// Recorder for MockKeyCache (not exported)
type _MockKeyCacheRecorder struct {
	mock *MockKeyCache
}

func NewMockKeyCache(ctrl *gomock.Controller) *MockKeyCache {
	mock := &MockKeyCache{ctrl: ctrl}
	mock.recorder = &_MockKeyCacheRecorder{mock}
	return mock
}

func (_m *MockKeyCache) EXPECT() *_MockKeyCacheRecorder {
	return _m.recorder
}

func (_m *MockKeyCache) GetTLFCryptKey(_param0 IFCERFTTlfID, _param1 IFCERFTKeyGen) (IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKey", _param0, _param1)
	ret0, _ := ret[0].(IFCERFTTLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyCacheRecorder) GetTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKey", arg0, arg1)
}

func (_m *MockKeyCache) PutTLFCryptKey(_param0 IFCERFTTlfID, _param1 IFCERFTKeyGen, _param2 IFCERFTTLFCryptKey) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKey", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyCacheRecorder) PutTLFCryptKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKey", arg0, arg1, arg2)
}

// Mock of BlockCache interface
type MockBlockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockCacheRecorder
}

// Recorder for MockBlockCache (not exported)
type _MockBlockCacheRecorder struct {
	mock *MockBlockCache
}

func NewMockBlockCache(ctrl *gomock.Controller) *MockBlockCache {
	mock := &MockBlockCache{ctrl: ctrl}
	mock.recorder = &_MockBlockCacheRecorder{mock}
	return mock
}

func (_m *MockBlockCache) EXPECT() *_MockBlockCacheRecorder {
	return _m.recorder
}

func (_m *MockBlockCache) Get(ptr IFCERFTBlockPointer) (IFCERFTBlock, error) {
	ret := _m.ctrl.Call(_m, "Get", ptr)
	ret0, _ := ret[0].(IFCERFTBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockBlockCache) CheckForKnownPtr(tlf IFCERFTTlfID, block *IFCERFTFileBlock) (IFCERFTBlockPointer, error) {
	ret := _m.ctrl.Call(_m, "CheckForKnownPtr", tlf, block)
	ret0, _ := ret[0].(IFCERFTBlockPointer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheRecorder) CheckForKnownPtr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckForKnownPtr", arg0, arg1)
}

func (_m *MockBlockCache) Put(ptr IFCERFTBlockPointer, tlf IFCERFTTlfID, block IFCERFTBlock, lifetime IFCERFTBlockCacheLifetime) error {
	ret := _m.ctrl.Call(_m, "Put", ptr, tlf, block, lifetime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockCache) DeleteTransient(ptr IFCERFTBlockPointer, tlf IFCERFTTlfID) error {
	ret := _m.ctrl.Call(_m, "DeleteTransient", ptr, tlf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) DeleteTransient(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTransient", arg0, arg1)
}

func (_m *MockBlockCache) DeletePermanent(id IFCERFTBlockID) error {
	ret := _m.ctrl.Call(_m, "DeletePermanent", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) DeletePermanent(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePermanent", arg0)
}

func (_m *MockBlockCache) DeleteKnownPtr(tlf IFCERFTTlfID, block *IFCERFTFileBlock) error {
	ret := _m.ctrl.Call(_m, "DeleteKnownPtr", tlf, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) DeleteKnownPtr(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteKnownPtr", arg0, arg1)
}

// Mock of DirtyBlockCache interface
type MockDirtyBlockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockDirtyBlockCacheRecorder
}

// Recorder for MockDirtyBlockCache (not exported)
type _MockDirtyBlockCacheRecorder struct {
	mock *MockDirtyBlockCache
}

func NewMockDirtyBlockCache(ctrl *gomock.Controller) *MockDirtyBlockCache {
	mock := &MockDirtyBlockCache{ctrl: ctrl}
	mock.recorder = &_MockDirtyBlockCacheRecorder{mock}
	return mock
}

func (_m *MockDirtyBlockCache) EXPECT() *_MockDirtyBlockCacheRecorder {
	return _m.recorder
}

func (_m *MockDirtyBlockCache) Get(ptr IFCERFTBlockPointer, branch IFCERFTBranchName) (IFCERFTBlock, error) {
	ret := _m.ctrl.Call(_m, "Get", ptr, branch)
	ret0, _ := ret[0].(IFCERFTBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirtyBlockCacheRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockDirtyBlockCache) Put(ptr IFCERFTBlockPointer, branch IFCERFTBranchName, block IFCERFTBlock) error {
	ret := _m.ctrl.Call(_m, "Put", ptr, branch, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockDirtyBlockCache) Delete(ptr IFCERFTBlockPointer, branch IFCERFTBranchName) error {
	ret := _m.ctrl.Call(_m, "Delete", ptr, branch)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

func (_m *MockDirtyBlockCache) IsDirty(ptr IFCERFTBlockPointer, branch IFCERFTBranchName) bool {
	ret := _m.ctrl.Call(_m, "IsDirty", ptr, branch)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) IsDirty(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDirty", arg0, arg1)
}

func (_m *MockDirtyBlockCache) RequestPermissionToDirty(ctx context.Context, estimatedDirtyBytes int64) (IFCERFTDirtyPermChan, error) {
	ret := _m.ctrl.Call(_m, "RequestPermissionToDirty", ctx, estimatedDirtyBytes)
	ret0, _ := ret[0].(IFCERFTDirtyPermChan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockDirtyBlockCacheRecorder) RequestPermissionToDirty(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestPermissionToDirty", arg0, arg1)
}

func (_m *MockDirtyBlockCache) UpdateUnsyncedBytes(newUnsyncedBytes int64, wasSyncing bool) {
	_m.ctrl.Call(_m, "UpdateUnsyncedBytes", newUnsyncedBytes, wasSyncing)
}

func (_mr *_MockDirtyBlockCacheRecorder) UpdateUnsyncedBytes(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateUnsyncedBytes", arg0, arg1)
}

func (_m *MockDirtyBlockCache) UpdateSyncingBytes(size int64) {
	_m.ctrl.Call(_m, "UpdateSyncingBytes", size)
}

func (_mr *_MockDirtyBlockCacheRecorder) UpdateSyncingBytes(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateSyncingBytes", arg0)
}

func (_m *MockDirtyBlockCache) BlockSyncFinished(size int64) {
	_m.ctrl.Call(_m, "BlockSyncFinished", size)
}

func (_mr *_MockDirtyBlockCacheRecorder) BlockSyncFinished(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSyncFinished", arg0)
}

func (_m *MockDirtyBlockCache) SyncFinished(size int64) {
	_m.ctrl.Call(_m, "SyncFinished", size)
}

func (_mr *_MockDirtyBlockCacheRecorder) SyncFinished(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SyncFinished", arg0)
}

func (_m *MockDirtyBlockCache) ShouldForceSync() bool {
	ret := _m.ctrl.Call(_m, "ShouldForceSync")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) ShouldForceSync() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldForceSync")
}

func (_m *MockDirtyBlockCache) Shutdown() error {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDirtyBlockCacheRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of cryptoPure interface
type MockcryptoPure struct {
	ctrl     *gomock.Controller
	recorder *_MockcryptoPureRecorder
}

// Recorder for MockcryptoPure (not exported)
type _MockcryptoPureRecorder struct {
	mock *MockcryptoPure
}

func NewMockcryptoPure(ctrl *gomock.Controller) *MockcryptoPure {
	mock := &MockcryptoPure{ctrl: ctrl}
	mock.recorder = &_MockcryptoPureRecorder{mock}
	return mock
}

func (_m *MockcryptoPure) EXPECT() *_MockcryptoPureRecorder {
	return _m.recorder
}

func (_m *MockcryptoPure) MakeRandomTlfID(isPublic bool) (IFCERFTTlfID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTlfID", isPublic)
	ret0, _ := ret[0].(IFCERFTTlfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomTlfID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTlfID", arg0)
}

func (_m *MockcryptoPure) MakeRandomBranchID() (IFCERFTBranchID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBranchID")
	ret0, _ := ret[0].(IFCERFTBranchID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomBranchID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBranchID")
}

func (_m *MockcryptoPure) MakeMdID(md *IFCERFTRootMetadata) (IFCERFTMdID, error) {
	ret := _m.ctrl.Call(_m, "MakeMdID", md)
	ret0, _ := ret[0].(IFCERFTMdID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeMdID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeMdID", arg0)
}

func (_m *MockcryptoPure) MakeMerkleHash(md *IFCERFTRootMetadataSigned) (MerkleHash, error) {
	ret := _m.ctrl.Call(_m, "MakeMerkleHash", md)
	ret0, _ := ret[0].(MerkleHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeMerkleHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeMerkleHash", arg0)
}

func (_m *MockcryptoPure) MakeTemporaryBlockID() (IFCERFTBlockID, error) {
	ret := _m.ctrl.Call(_m, "MakeTemporaryBlockID")
	ret0, _ := ret[0].(IFCERFTBlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeTemporaryBlockID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTemporaryBlockID")
}

func (_m *MockcryptoPure) MakePermanentBlockID(encodedEncryptedData []byte) (IFCERFTBlockID, error) {
	ret := _m.ctrl.Call(_m, "MakePermanentBlockID", encodedEncryptedData)
	ret0, _ := ret[0].(IFCERFTBlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakePermanentBlockID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakePermanentBlockID", arg0)
}

func (_m *MockcryptoPure) VerifyBlockID(encodedEncryptedData []byte, id IFCERFTBlockID) error {
	ret := _m.ctrl.Call(_m, "VerifyBlockID", encodedEncryptedData, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcryptoPureRecorder) VerifyBlockID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyBlockID", arg0, arg1)
}

func (_m *MockcryptoPure) MakeBlockRefNonce() (IFCERFTBlockRefNonce, error) {
	ret := _m.ctrl.Call(_m, "MakeBlockRefNonce")
	ret0, _ := ret[0].(IFCERFTBlockRefNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeBlockRefNonce() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeBlockRefNonce")
}

func (_m *MockcryptoPure) MakeRandomTLFKeys() (IFCERFTTLFPublicKey, IFCERFTTLFPrivateKey, IFCERFTTLFEphemeralPublicKey, IFCERFTTLFEphemeralPrivateKey, IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFKeys")
	ret0, _ := ret[0].(IFCERFTTLFPublicKey)
	ret1, _ := ret[1].(IFCERFTTLFPrivateKey)
	ret2, _ := ret[2].(IFCERFTTLFEphemeralPublicKey)
	ret3, _ := ret[3].(IFCERFTTLFEphemeralPrivateKey)
	ret4, _ := ret[4].(IFCERFTTLFCryptKey)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockcryptoPureRecorder) MakeRandomTLFKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFKeys")
}

func (_m *MockcryptoPure) MakeRandomTLFCryptKeyServerHalf() (IFCERFTTLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFCryptKeyServerHalf")
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomTLFCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFCryptKeyServerHalf")
}

func (_m *MockcryptoPure) MakeRandomBlockCryptKeyServerHalf() (IFCERFTBlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBlockCryptKeyServerHalf")
	ret0, _ := ret[0].(IFCERFTBlockCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MakeRandomBlockCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBlockCryptKeyServerHalf")
}

func (_m *MockcryptoPure) MaskTLFCryptKey(serverHalf IFCERFTTLFCryptKeyServerHalf, key IFCERFTTLFCryptKey) (IFCERFTTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "MaskTLFCryptKey", serverHalf, key)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) MaskTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaskTLFCryptKey", arg0, arg1)
}

func (_m *MockcryptoPure) UnmaskTLFCryptKey(serverHalf IFCERFTTLFCryptKeyServerHalf, clientHalf IFCERFTTLFCryptKeyClientHalf) (IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "UnmaskTLFCryptKey", serverHalf, clientHalf)
	ret0, _ := ret[0].(IFCERFTTLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) UnmaskTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmaskTLFCryptKey", arg0, arg1)
}

func (_m *MockcryptoPure) UnmaskBlockCryptKey(serverHalf IFCERFTBlockCryptKeyServerHalf, tlfCryptKey IFCERFTTLFCryptKey) (IFCERFTBlockCryptKey, error) {
	ret := _m.ctrl.Call(_m, "UnmaskBlockCryptKey", serverHalf, tlfCryptKey)
	ret0, _ := ret[0].(IFCERFTBlockCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) UnmaskBlockCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmaskBlockCryptKey", arg0, arg1)
}

func (_m *MockcryptoPure) Verify(msg []byte, sigInfo IFCERFTSignatureInfo) error {
	ret := _m.ctrl.Call(_m, "Verify", msg, sigInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcryptoPureRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Verify", arg0, arg1)
}

func (_m *MockcryptoPure) EncryptTLFCryptKeyClientHalf(privateKey IFCERFTTLFEphemeralPrivateKey, publicKey IFCERFTCryptPublicKey, clientHalf IFCERFTTLFCryptKeyClientHalf) (IFCERFTEncryptedTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "EncryptTLFCryptKeyClientHalf", privateKey, publicKey, clientHalf)
	ret0, _ := ret[0].(IFCERFTEncryptedTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) EncryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockcryptoPure) EncryptPrivateMetadata(pmd *IFCERFTPrivateMetadata, key IFCERFTTLFCryptKey) (IFCERFTEncryptedPrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "EncryptPrivateMetadata", pmd, key)
	ret0, _ := ret[0].(IFCERFTEncryptedPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) EncryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptPrivateMetadata", arg0, arg1)
}

func (_m *MockcryptoPure) DecryptPrivateMetadata(encryptedPMD IFCERFTEncryptedPrivateMetadata, key IFCERFTTLFCryptKey) (*IFCERFTPrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "DecryptPrivateMetadata", encryptedPMD, key)
	ret0, _ := ret[0].(*IFCERFTPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) DecryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptPrivateMetadata", arg0, arg1)
}

func (_m *MockcryptoPure) EncryptBlock(block IFCERFTBlock, key IFCERFTBlockCryptKey) (int, IFCERFTEncryptedBlock, error) {
	ret := _m.ctrl.Call(_m, "EncryptBlock", block, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(IFCERFTEncryptedBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockcryptoPureRecorder) EncryptBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptBlock", arg0, arg1)
}

func (_m *MockcryptoPure) DecryptBlock(encryptedBlock IFCERFTEncryptedBlock, key IFCERFTBlockCryptKey, block IFCERFTBlock) error {
	ret := _m.ctrl.Call(_m, "DecryptBlock", encryptedBlock, key, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcryptoPureRecorder) DecryptBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptBlock", arg0, arg1, arg2)
}

func (_m *MockcryptoPure) GetTLFCryptKeyServerHalfID(user protocol.UID, deviceKID protocol.KID, serverHalf IFCERFTTLFCryptKeyServerHalf) (IFCERFTTLFCryptKeyServerHalfID, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalfID", user, deviceKID, serverHalf)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyServerHalfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) GetTLFCryptKeyServerHalfID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalfID", arg0, arg1, arg2)
}

func (_m *MockcryptoPure) VerifyTLFCryptKeyServerHalfID(serverHalfID IFCERFTTLFCryptKeyServerHalfID, user protocol.UID, deviceKID protocol.KID, serverHalf IFCERFTTLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "VerifyTLFCryptKeyServerHalfID", serverHalfID, user, deviceKID, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcryptoPureRecorder) VerifyTLFCryptKeyServerHalfID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyTLFCryptKeyServerHalfID", arg0, arg1, arg2, arg3)
}

func (_m *MockcryptoPure) EncryptMerkleLeaf(leaf MerkleLeaf, pubKey IFCERFTTLFPublicKey, nonce *[24]byte, ePrivKey IFCERFTTLFEphemeralPrivateKey) (IFCERFTEncryptedMerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "EncryptMerkleLeaf", leaf, pubKey, nonce, ePrivKey)
	ret0, _ := ret[0].(IFCERFTEncryptedMerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) EncryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

func (_m *MockcryptoPure) DecryptMerkleLeaf(encryptedLeaf IFCERFTEncryptedMerkleLeaf, privKey IFCERFTTLFPrivateKey, nonce *[24]byte, ePubKey IFCERFTTLFEphemeralPublicKey) (*MerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "DecryptMerkleLeaf", encryptedLeaf, privKey, nonce, ePubKey)
	ret0, _ := ret[0].(*MerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockcryptoPureRecorder) DecryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

// Mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *_MockCryptoRecorder
}

// Recorder for MockCrypto (not exported)
type _MockCryptoRecorder struct {
	mock *MockCrypto
}

func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &_MockCryptoRecorder{mock}
	return mock
}

func (_m *MockCrypto) EXPECT() *_MockCryptoRecorder {
	return _m.recorder
}

func (_m *MockCrypto) MakeRandomTlfID(isPublic bool) (IFCERFTTlfID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTlfID", isPublic)
	ret0, _ := ret[0].(IFCERFTTlfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomTlfID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTlfID", arg0)
}

func (_m *MockCrypto) MakeRandomBranchID() (IFCERFTBranchID, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBranchID")
	ret0, _ := ret[0].(IFCERFTBranchID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomBranchID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBranchID")
}

func (_m *MockCrypto) MakeMdID(md *IFCERFTRootMetadata) (IFCERFTMdID, error) {
	ret := _m.ctrl.Call(_m, "MakeMdID", md)
	ret0, _ := ret[0].(IFCERFTMdID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeMdID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeMdID", arg0)
}

func (_m *MockCrypto) MakeMerkleHash(md *IFCERFTRootMetadataSigned) (MerkleHash, error) {
	ret := _m.ctrl.Call(_m, "MakeMerkleHash", md)
	ret0, _ := ret[0].(MerkleHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeMerkleHash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeMerkleHash", arg0)
}

func (_m *MockCrypto) MakeTemporaryBlockID() (IFCERFTBlockID, error) {
	ret := _m.ctrl.Call(_m, "MakeTemporaryBlockID")
	ret0, _ := ret[0].(IFCERFTBlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeTemporaryBlockID() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeTemporaryBlockID")
}

func (_m *MockCrypto) MakePermanentBlockID(encodedEncryptedData []byte) (IFCERFTBlockID, error) {
	ret := _m.ctrl.Call(_m, "MakePermanentBlockID", encodedEncryptedData)
	ret0, _ := ret[0].(IFCERFTBlockID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakePermanentBlockID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakePermanentBlockID", arg0)
}

func (_m *MockCrypto) VerifyBlockID(encodedEncryptedData []byte, id IFCERFTBlockID) error {
	ret := _m.ctrl.Call(_m, "VerifyBlockID", encodedEncryptedData, id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) VerifyBlockID(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyBlockID", arg0, arg1)
}

func (_m *MockCrypto) MakeBlockRefNonce() (IFCERFTBlockRefNonce, error) {
	ret := _m.ctrl.Call(_m, "MakeBlockRefNonce")
	ret0, _ := ret[0].(IFCERFTBlockRefNonce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeBlockRefNonce() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeBlockRefNonce")
}

func (_m *MockCrypto) MakeRandomTLFKeys() (IFCERFTTLFPublicKey, IFCERFTTLFPrivateKey, IFCERFTTLFEphemeralPublicKey, IFCERFTTLFEphemeralPrivateKey, IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFKeys")
	ret0, _ := ret[0].(IFCERFTTLFPublicKey)
	ret1, _ := ret[1].(IFCERFTTLFPrivateKey)
	ret2, _ := ret[2].(IFCERFTTLFEphemeralPublicKey)
	ret3, _ := ret[3].(IFCERFTTLFEphemeralPrivateKey)
	ret4, _ := ret[4].(IFCERFTTLFCryptKey)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

func (_mr *_MockCryptoRecorder) MakeRandomTLFKeys() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFKeys")
}

func (_m *MockCrypto) MakeRandomTLFCryptKeyServerHalf() (IFCERFTTLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomTLFCryptKeyServerHalf")
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomTLFCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomTLFCryptKeyServerHalf")
}

func (_m *MockCrypto) MakeRandomBlockCryptKeyServerHalf() (IFCERFTBlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "MakeRandomBlockCryptKeyServerHalf")
	ret0, _ := ret[0].(IFCERFTBlockCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MakeRandomBlockCryptKeyServerHalf() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeRandomBlockCryptKeyServerHalf")
}

func (_m *MockCrypto) MaskTLFCryptKey(serverHalf IFCERFTTLFCryptKeyServerHalf, key IFCERFTTLFCryptKey) (IFCERFTTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "MaskTLFCryptKey", serverHalf, key)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) MaskTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaskTLFCryptKey", arg0, arg1)
}

func (_m *MockCrypto) UnmaskTLFCryptKey(serverHalf IFCERFTTLFCryptKeyServerHalf, clientHalf IFCERFTTLFCryptKeyClientHalf) (IFCERFTTLFCryptKey, error) {
	ret := _m.ctrl.Call(_m, "UnmaskTLFCryptKey", serverHalf, clientHalf)
	ret0, _ := ret[0].(IFCERFTTLFCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) UnmaskTLFCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmaskTLFCryptKey", arg0, arg1)
}

func (_m *MockCrypto) UnmaskBlockCryptKey(serverHalf IFCERFTBlockCryptKeyServerHalf, tlfCryptKey IFCERFTTLFCryptKey) (IFCERFTBlockCryptKey, error) {
	ret := _m.ctrl.Call(_m, "UnmaskBlockCryptKey", serverHalf, tlfCryptKey)
	ret0, _ := ret[0].(IFCERFTBlockCryptKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) UnmaskBlockCryptKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmaskBlockCryptKey", arg0, arg1)
}

func (_m *MockCrypto) Verify(msg []byte, sigInfo IFCERFTSignatureInfo) error {
	ret := _m.ctrl.Call(_m, "Verify", msg, sigInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) Verify(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Verify", arg0, arg1)
}

func (_m *MockCrypto) EncryptTLFCryptKeyClientHalf(privateKey IFCERFTTLFEphemeralPrivateKey, publicKey IFCERFTCryptPublicKey, clientHalf IFCERFTTLFCryptKeyClientHalf) (IFCERFTEncryptedTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "EncryptTLFCryptKeyClientHalf", privateKey, publicKey, clientHalf)
	ret0, _ := ret[0].(IFCERFTEncryptedTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockCrypto) EncryptPrivateMetadata(pmd *IFCERFTPrivateMetadata, key IFCERFTTLFCryptKey) (IFCERFTEncryptedPrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "EncryptPrivateMetadata", pmd, key)
	ret0, _ := ret[0].(IFCERFTEncryptedPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptPrivateMetadata", arg0, arg1)
}

func (_m *MockCrypto) DecryptPrivateMetadata(encryptedPMD IFCERFTEncryptedPrivateMetadata, key IFCERFTTLFCryptKey) (*IFCERFTPrivateMetadata, error) {
	ret := _m.ctrl.Call(_m, "DecryptPrivateMetadata", encryptedPMD, key)
	ret0, _ := ret[0].(*IFCERFTPrivateMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptPrivateMetadata(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptPrivateMetadata", arg0, arg1)
}

func (_m *MockCrypto) EncryptBlock(block IFCERFTBlock, key IFCERFTBlockCryptKey) (int, IFCERFTEncryptedBlock, error) {
	ret := _m.ctrl.Call(_m, "EncryptBlock", block, key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(IFCERFTEncryptedBlock)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCryptoRecorder) EncryptBlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptBlock", arg0, arg1)
}

func (_m *MockCrypto) DecryptBlock(encryptedBlock IFCERFTEncryptedBlock, key IFCERFTBlockCryptKey, block IFCERFTBlock) error {
	ret := _m.ctrl.Call(_m, "DecryptBlock", encryptedBlock, key, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) DecryptBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptBlock", arg0, arg1, arg2)
}

func (_m *MockCrypto) GetTLFCryptKeyServerHalfID(user protocol.UID, deviceKID protocol.KID, serverHalf IFCERFTTLFCryptKeyServerHalf) (IFCERFTTLFCryptKeyServerHalfID, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalfID", user, deviceKID, serverHalf)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyServerHalfID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) GetTLFCryptKeyServerHalfID(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalfID", arg0, arg1, arg2)
}

func (_m *MockCrypto) VerifyTLFCryptKeyServerHalfID(serverHalfID IFCERFTTLFCryptKeyServerHalfID, user protocol.UID, deviceKID protocol.KID, serverHalf IFCERFTTLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "VerifyTLFCryptKeyServerHalfID", serverHalfID, user, deviceKID, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) VerifyTLFCryptKeyServerHalfID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyTLFCryptKeyServerHalfID", arg0, arg1, arg2, arg3)
}

func (_m *MockCrypto) EncryptMerkleLeaf(leaf MerkleLeaf, pubKey IFCERFTTLFPublicKey, nonce *[24]byte, ePrivKey IFCERFTTLFEphemeralPrivateKey) (IFCERFTEncryptedMerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "EncryptMerkleLeaf", leaf, pubKey, nonce, ePrivKey)
	ret0, _ := ret[0].(IFCERFTEncryptedMerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) EncryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "EncryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

func (_m *MockCrypto) DecryptMerkleLeaf(encryptedLeaf IFCERFTEncryptedMerkleLeaf, privKey IFCERFTTLFPrivateKey, nonce *[24]byte, ePubKey IFCERFTTLFEphemeralPublicKey) (*MerkleLeaf, error) {
	ret := _m.ctrl.Call(_m, "DecryptMerkleLeaf", encryptedLeaf, privKey, nonce, ePubKey)
	ret0, _ := ret[0].(*MerkleLeaf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptMerkleLeaf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptMerkleLeaf", arg0, arg1, arg2, arg3)
}

func (_m *MockCrypto) Sign(ctx context.Context, msg []byte) (IFCERFTSignatureInfo, error) {
	ret := _m.ctrl.Call(_m, "Sign", ctx, msg)
	ret0, _ := ret[0].(IFCERFTSignatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Sign(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sign", arg0, arg1)
}

func (_m *MockCrypto) SignToString(ctx context.Context, msg []byte) (string, error) {
	ret := _m.ctrl.Call(_m, "SignToString", ctx, msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) SignToString(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SignToString", arg0, arg1)
}

func (_m *MockCrypto) DecryptTLFCryptKeyClientHalf(ctx context.Context, publicKey IFCERFTTLFEphemeralPublicKey, encryptedClientHalf IFCERFTEncryptedTLFCryptKeyClientHalf) (IFCERFTTLFCryptKeyClientHalf, error) {
	ret := _m.ctrl.Call(_m, "DecryptTLFCryptKeyClientHalf", ctx, publicKey, encryptedClientHalf)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) DecryptTLFCryptKeyClientHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptTLFCryptKeyClientHalf", arg0, arg1, arg2)
}

func (_m *MockCrypto) DecryptTLFCryptKeyClientHalfAny(ctx context.Context, keys []IFCERFTEncryptedTLFCryptKeyClientAndEphemeral, promptPaper bool) (IFCERFTTLFCryptKeyClientHalf, int, error) {
	ret := _m.ctrl.Call(_m, "DecryptTLFCryptKeyClientHalfAny", ctx, keys, promptPaper)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyClientHalf)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockCryptoRecorder) DecryptTLFCryptKeyClientHalfAny(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DecryptTLFCryptKeyClientHalfAny", arg0, arg1, arg2)
}

func (_m *MockCrypto) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockCryptoRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of Codec interface
type MockCodec struct {
	ctrl     *gomock.Controller
	recorder *_MockCodecRecorder
}

// Recorder for MockCodec (not exported)
type _MockCodecRecorder struct {
	mock *MockCodec
}

func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &_MockCodecRecorder{mock}
	return mock
}

func (_m *MockCodec) EXPECT() *_MockCodecRecorder {
	return _m.recorder
}

func (_m *MockCodec) Decode(buf []byte, obj interface{}) error {
	ret := _m.ctrl.Call(_m, "Decode", buf, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCodecRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decode", arg0, arg1)
}

func (_m *MockCodec) Encode(obj interface{}) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Encode", obj)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodecRecorder) Encode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode", arg0)
}

func (_m *MockCodec) RegisterType(rt reflect.Type, code IFCERFTExtCode) {
	_m.ctrl.Call(_m, "RegisterType", rt, code)
}

func (_mr *_MockCodecRecorder) RegisterType(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterType", arg0, arg1)
}

func (_m *MockCodec) RegisterIfaceSliceType(rt reflect.Type, code IFCERFTExtCode, typer func(interface{}) reflect.Value) {
	_m.ctrl.Call(_m, "RegisterIfaceSliceType", rt, code, typer)
}

func (_mr *_MockCodecRecorder) RegisterIfaceSliceType(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterIfaceSliceType", arg0, arg1, arg2)
}

// Mock of MDOps interface
type MockMDOps struct {
	ctrl     *gomock.Controller
	recorder *_MockMDOpsRecorder
}

// Recorder for MockMDOps (not exported)
type _MockMDOpsRecorder struct {
	mock *MockMDOps
}

func NewMockMDOps(ctrl *gomock.Controller) *MockMDOps {
	mock := &MockMDOps{ctrl: ctrl}
	mock.recorder = &_MockMDOpsRecorder{mock}
	return mock
}

func (_m *MockMDOps) EXPECT() *_MockMDOpsRecorder {
	return _m.recorder
}

func (_m *MockMDOps) GetForHandle(ctx context.Context, handle *IFCERFTTlfHandle) (*IFCERFTRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle)
	ret0, _ := ret[0].(*IFCERFTRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetForHandle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1)
}

func (_m *MockMDOps) GetUnmergedForHandle(ctx context.Context, handle *IFCERFTTlfHandle) (*IFCERFTRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedForHandle", ctx, handle)
	ret0, _ := ret[0].(*IFCERFTRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedForHandle(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedForHandle", arg0, arg1)
}

func (_m *MockMDOps) GetForTLF(ctx context.Context, id IFCERFTTlfID) (*IFCERFTRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id)
	ret0, _ := ret[0].(*IFCERFTRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1)
}

func (_m *MockMDOps) GetUnmergedForTLF(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID) (*IFCERFTRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedForTLF", ctx, id, bid)
	ret0, _ := ret[0].(*IFCERFTRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedForTLF(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedForTLF", arg0, arg1, arg2)
}

func (_m *MockMDOps) GetRange(ctx context.Context, id IFCERFTTlfID, start IFCERFTMetadataRevision, stop IFCERFTMetadataRevision) ([]*IFCERFTRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, start, stop)
	ret0, _ := ret[0].([]*IFCERFTRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetRange(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3)
}

func (_m *MockMDOps) GetUnmergedRange(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID, start IFCERFTMetadataRevision, stop IFCERFTMetadataRevision) ([]*IFCERFTRootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetUnmergedRange", ctx, id, bid, start, stop)
	ret0, _ := ret[0].([]*IFCERFTRootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetUnmergedRange(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUnmergedRange", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockMDOps) Put(ctx context.Context, rmd *IFCERFTRootMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDOpsRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

func (_m *MockMDOps) PutUnmerged(ctx context.Context, rmd *IFCERFTRootMetadata, bid IFCERFTBranchID) error {
	ret := _m.ctrl.Call(_m, "PutUnmerged", ctx, rmd, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDOpsRecorder) PutUnmerged(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutUnmerged", arg0, arg1, arg2)
}

func (_m *MockMDOps) GetLatestHandleForTLF(ctx context.Context, id IFCERFTTlfID) (IFCERFTBareTlfHandle, error) {
	ret := _m.ctrl.Call(_m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(IFCERFTBareTlfHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetLatestHandleForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLatestHandleForTLF", arg0, arg1)
}

// Mock of KeyOps interface
type MockKeyOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyOpsRecorder
}

// Recorder for MockKeyOps (not exported)
type _MockKeyOpsRecorder struct {
	mock *MockKeyOps
}

func NewMockKeyOps(ctrl *gomock.Controller) *MockKeyOps {
	mock := &MockKeyOps{ctrl: ctrl}
	mock.recorder = &_MockKeyOpsRecorder{mock}
	return mock
}

func (_m *MockKeyOps) EXPECT() *_MockKeyOpsRecorder {
	return _m.recorder
}

func (_m *MockKeyOps) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID IFCERFTTLFCryptKeyServerHalfID, cryptPublicKey IFCERFTCryptPublicKey) (IFCERFTTLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID, cryptPublicKey)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyOpsRecorder) GetTLFCryptKeyServerHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalf", arg0, arg1, arg2)
}

func (_m *MockKeyOps) PutTLFCryptKeyServerHalves(ctx context.Context, serverKeyHalves map[protocol.UID]map[protocol.KID]IFCERFTTLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKeyServerHalves", ctx, serverKeyHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) PutTLFCryptKeyServerHalves(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKeyServerHalves", arg0, arg1)
}

func (_m *MockKeyOps) DeleteTLFCryptKeyServerHalf(ctx context.Context, uid protocol.UID, kid protocol.KID, serverHalfID IFCERFTTLFCryptKeyServerHalfID) error {
	ret := _m.ctrl.Call(_m, "DeleteTLFCryptKeyServerHalf", ctx, uid, kid, serverHalfID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) DeleteTLFCryptKeyServerHalf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTLFCryptKeyServerHalf", arg0, arg1, arg2, arg3)
}

// Mock of BlockOps interface
type MockBlockOps struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockOpsRecorder
}

// Recorder for MockBlockOps (not exported)
type _MockBlockOpsRecorder struct {
	mock *MockBlockOps
}

func NewMockBlockOps(ctrl *gomock.Controller) *MockBlockOps {
	mock := &MockBlockOps{ctrl: ctrl}
	mock.recorder = &_MockBlockOpsRecorder{mock}
	return mock
}

func (_m *MockBlockOps) EXPECT() *_MockBlockOpsRecorder {
	return _m.recorder
}

func (_m *MockBlockOps) Get(ctx context.Context, md *IFCERFTRootMetadata, blockPtr IFCERFTBlockPointer, block IFCERFTBlock) error {
	ret := _m.ctrl.Call(_m, "Get", ctx, md, blockPtr, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockOps) Ready(ctx context.Context, md *IFCERFTRootMetadata, block IFCERFTBlock) (IFCERFTBlockID, int, IFCERFTReadyBlockData, error) {
	ret := _m.ctrl.Call(_m, "Ready", ctx, md, block)
	ret0, _ := ret[0].(IFCERFTBlockID)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(IFCERFTReadyBlockData)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockBlockOpsRecorder) Ready(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ready", arg0, arg1, arg2)
}

func (_m *MockBlockOps) Put(ctx context.Context, md *IFCERFTRootMetadata, blockPtr IFCERFTBlockPointer, readyBlockData IFCERFTReadyBlockData) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, md, blockPtr, readyBlockData)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Put(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockOps) Delete(ctx context.Context, md *IFCERFTRootMetadata, ptrs []IFCERFTBlockPointer) (map[IFCERFTBlockID]int, error) {
	ret := _m.ctrl.Call(_m, "Delete", ctx, md, ptrs)
	ret0, _ := ret[0].(map[IFCERFTBlockID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockOpsRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1, arg2)
}

func (_m *MockBlockOps) Archive(ctx context.Context, md *IFCERFTRootMetadata, ptrs []IFCERFTBlockPointer) error {
	ret := _m.ctrl.Call(_m, "Archive", ctx, md, ptrs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Archive(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Archive", arg0, arg1, arg2)
}

// Mock of MDServer interface
type MockMDServer struct {
	ctrl     *gomock.Controller
	recorder *_MockMDServerRecorder
}

// Recorder for MockMDServer (not exported)
type _MockMDServerRecorder struct {
	mock *MockMDServer
}

func NewMockMDServer(ctrl *gomock.Controller) *MockMDServer {
	mock := &MockMDServer{ctrl: ctrl}
	mock.recorder = &_MockMDServerRecorder{mock}
	return mock
}

func (_m *MockMDServer) EXPECT() *_MockMDServerRecorder {
	return _m.recorder
}

func (_m *MockMDServer) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockMDServerRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockMDServer) GetForHandle(ctx context.Context, handle IFCERFTBareTlfHandle, mStatus IFCERFTMergeStatus) (IFCERFTTlfID, *IFCERFTRootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(IFCERFTTlfID)
	ret1, _ := ret[1].(*IFCERFTRootMetadataSigned)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockMDServerRecorder) GetForHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1, arg2)
}

func (_m *MockMDServer) GetForTLF(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID, mStatus IFCERFTMergeStatus) (*IFCERFTRootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id, bid, mStatus)
	ret0, _ := ret[0].(*IFCERFTRootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetForTLF(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1, arg2, arg3)
}

func (_m *MockMDServer) GetRange(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID, mStatus IFCERFTMergeStatus, start IFCERFTMetadataRevision, stop IFCERFTMetadataRevision) ([]*IFCERFTRootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, bid, mStatus, start, stop)
	ret0, _ := ret[0].([]*IFCERFTRootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetRange(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockMDServer) Put(ctx context.Context, rmds *IFCERFTRootMetadataSigned) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmds)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDServerRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

func (_m *MockMDServer) PruneBranch(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID) error {
	ret := _m.ctrl.Call(_m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDServerRecorder) PruneBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PruneBranch", arg0, arg1, arg2)
}

func (_m *MockMDServer) RegisterForUpdate(ctx context.Context, id IFCERFTTlfID, currHead IFCERFTMetadataRevision) (<-chan error, error) {
	ret := _m.ctrl.Call(_m, "RegisterForUpdate", ctx, id, currHead)
	ret0, _ := ret[0].(<-chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) RegisterForUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForUpdate", arg0, arg1, arg2)
}

func (_m *MockMDServer) CheckForRekeys(ctx context.Context) <-chan error {
	ret := _m.ctrl.Call(_m, "CheckForRekeys", ctx)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockMDServerRecorder) CheckForRekeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckForRekeys", arg0)
}

func (_m *MockMDServer) TruncateLock(ctx context.Context, id IFCERFTTlfID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateLock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) TruncateLock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateLock", arg0, arg1)
}

func (_m *MockMDServer) TruncateUnlock(ctx context.Context, id IFCERFTTlfID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateUnlock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) TruncateUnlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateUnlock", arg0, arg1)
}

func (_m *MockMDServer) DisableRekeyUpdatesForTesting() {
	_m.ctrl.Call(_m, "DisableRekeyUpdatesForTesting")
}

func (_mr *_MockMDServerRecorder) DisableRekeyUpdatesForTesting() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableRekeyUpdatesForTesting")
}

func (_m *MockMDServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockMDServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockMDServer) IsConnected() bool {
	ret := _m.ctrl.Call(_m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockMDServerRecorder) IsConnected() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsConnected")
}

func (_m *MockMDServer) GetLatestHandleForTLF(ctx context.Context, id IFCERFTTlfID) (IFCERFTBareTlfHandle, error) {
	ret := _m.ctrl.Call(_m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(IFCERFTBareTlfHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetLatestHandleForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLatestHandleForTLF", arg0, arg1)
}

// Mock of mdServerLocal interface
type MockmdServerLocal struct {
	ctrl     *gomock.Controller
	recorder *_MockmdServerLocalRecorder
}

// Recorder for MockmdServerLocal (not exported)
type _MockmdServerLocalRecorder struct {
	mock *MockmdServerLocal
}

func NewMockmdServerLocal(ctrl *gomock.Controller) *MockmdServerLocal {
	mock := &MockmdServerLocal{ctrl: ctrl}
	mock.recorder = &_MockmdServerLocalRecorder{mock}
	return mock
}

func (_m *MockmdServerLocal) EXPECT() *_MockmdServerLocalRecorder {
	return _m.recorder
}

func (_m *MockmdServerLocal) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockmdServerLocalRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockmdServerLocal) GetForHandle(ctx context.Context, handle IFCERFTBareTlfHandle, mStatus IFCERFTMergeStatus) (IFCERFTTlfID, *IFCERFTRootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForHandle", ctx, handle, mStatus)
	ret0, _ := ret[0].(IFCERFTTlfID)
	ret1, _ := ret[1].(*IFCERFTRootMetadataSigned)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockmdServerLocalRecorder) GetForHandle(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForHandle", arg0, arg1, arg2)
}

func (_m *MockmdServerLocal) GetForTLF(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID, mStatus IFCERFTMergeStatus) (*IFCERFTRootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetForTLF", ctx, id, bid, mStatus)
	ret0, _ := ret[0].(*IFCERFTRootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) GetForTLF(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetForTLF", arg0, arg1, arg2, arg3)
}

func (_m *MockmdServerLocal) GetRange(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID, mStatus IFCERFTMergeStatus, start IFCERFTMetadataRevision, stop IFCERFTMetadataRevision) ([]*IFCERFTRootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetRange", ctx, id, bid, mStatus, start, stop)
	ret0, _ := ret[0].([]*IFCERFTRootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) GetRange(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRange", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockmdServerLocal) Put(ctx context.Context, rmds *IFCERFTRootMetadataSigned) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, rmds)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

func (_m *MockmdServerLocal) PruneBranch(ctx context.Context, id IFCERFTTlfID, bid IFCERFTBranchID) error {
	ret := _m.ctrl.Call(_m, "PruneBranch", ctx, id, bid)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) PruneBranch(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PruneBranch", arg0, arg1, arg2)
}

func (_m *MockmdServerLocal) RegisterForUpdate(ctx context.Context, id IFCERFTTlfID, currHead IFCERFTMetadataRevision) (<-chan error, error) {
	ret := _m.ctrl.Call(_m, "RegisterForUpdate", ctx, id, currHead)
	ret0, _ := ret[0].(<-chan error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) RegisterForUpdate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForUpdate", arg0, arg1, arg2)
}

func (_m *MockmdServerLocal) CheckForRekeys(ctx context.Context) <-chan error {
	ret := _m.ctrl.Call(_m, "CheckForRekeys", ctx)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) CheckForRekeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckForRekeys", arg0)
}

func (_m *MockmdServerLocal) TruncateLock(ctx context.Context, id IFCERFTTlfID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateLock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) TruncateLock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateLock", arg0, arg1)
}

func (_m *MockmdServerLocal) TruncateUnlock(ctx context.Context, id IFCERFTTlfID) (bool, error) {
	ret := _m.ctrl.Call(_m, "TruncateUnlock", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) TruncateUnlock(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TruncateUnlock", arg0, arg1)
}

func (_m *MockmdServerLocal) DisableRekeyUpdatesForTesting() {
	_m.ctrl.Call(_m, "DisableRekeyUpdatesForTesting")
}

func (_mr *_MockmdServerLocalRecorder) DisableRekeyUpdatesForTesting() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DisableRekeyUpdatesForTesting")
}

func (_m *MockmdServerLocal) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockmdServerLocalRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockmdServerLocal) IsConnected() bool {
	ret := _m.ctrl.Call(_m, "IsConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) IsConnected() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsConnected")
}

func (_m *MockmdServerLocal) GetLatestHandleForTLF(ctx context.Context, id IFCERFTTlfID) (IFCERFTBareTlfHandle, error) {
	ret := _m.ctrl.Call(_m, "GetLatestHandleForTLF", ctx, id)
	ret0, _ := ret[0].(IFCERFTBareTlfHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) GetLatestHandleForTLF(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLatestHandleForTLF", arg0, arg1)
}

func (_m *MockmdServerLocal) addNewAssertionForTest(uid protocol.UID, newAssertion protocol.SocialAssertion) error {
	ret := _m.ctrl.Call(_m, "addNewAssertionForTest", uid, newAssertion)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) addNewAssertionForTest(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "addNewAssertionForTest", arg0, arg1)
}

func (_m *MockmdServerLocal) getCurrentMergedHeadRevision(ctx context.Context, id IFCERFTTlfID) (IFCERFTMetadataRevision, error) {
	ret := _m.ctrl.Call(_m, "getCurrentMergedHeadRevision", ctx, id)
	ret0, _ := ret[0].(IFCERFTMetadataRevision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockmdServerLocalRecorder) getCurrentMergedHeadRevision(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getCurrentMergedHeadRevision", arg0, arg1)
}

func (_m *MockmdServerLocal) isShutdown() bool {
	ret := _m.ctrl.Call(_m, "isShutdown")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) isShutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "isShutdown")
}

func (_m *MockmdServerLocal) copy(config IFCERFTConfig) mdServerLocal {
	ret := _m.ctrl.Call(_m, "copy", config)
	ret0, _ := ret[0].(mdServerLocal)
	return ret0
}

func (_mr *_MockmdServerLocalRecorder) copy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "copy", arg0)
}

// Mock of BlockServer interface
type MockBlockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockServerRecorder
}

// Recorder for MockBlockServer (not exported)
type _MockBlockServerRecorder struct {
	mock *MockBlockServer
}

func NewMockBlockServer(ctrl *gomock.Controller) *MockBlockServer {
	mock := &MockBlockServer{ctrl: ctrl}
	mock.recorder = &_MockBlockServerRecorder{mock}
	return mock
}

func (_m *MockBlockServer) EXPECT() *_MockBlockServerRecorder {
	return _m.recorder
}

func (_m *MockBlockServer) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockBlockServerRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockBlockServer) Get(ctx context.Context, id IFCERFTBlockID, tlfID IFCERFTTlfID, context IFCERFTBlockContext) ([]byte, IFCERFTBlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, id, tlfID, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(IFCERFTBlockCryptKeyServerHalf)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockBlockServerRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockServer) Put(ctx context.Context, id IFCERFTBlockID, tlfID IFCERFTTlfID, context IFCERFTBlockContext, buf []byte, serverHalf IFCERFTBlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, id, tlfID, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) Put(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockBlockServer) AddBlockReference(ctx context.Context, id IFCERFTBlockID, tlfID IFCERFTTlfID, context IFCERFTBlockContext) error {
	ret := _m.ctrl.Call(_m, "AddBlockReference", ctx, id, tlfID, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) AddBlockReference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddBlockReference", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockServer) RemoveBlockReference(ctx context.Context, tlfID IFCERFTTlfID, contexts map[IFCERFTBlockID][]IFCERFTBlockContext) (map[IFCERFTBlockID]int, error) {
	ret := _m.ctrl.Call(_m, "RemoveBlockReference", ctx, tlfID, contexts)
	ret0, _ := ret[0].(map[IFCERFTBlockID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockServerRecorder) RemoveBlockReference(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveBlockReference", arg0, arg1, arg2)
}

func (_m *MockBlockServer) ArchiveBlockReferences(ctx context.Context, tlfID IFCERFTTlfID, contexts map[IFCERFTBlockID][]IFCERFTBlockContext) error {
	ret := _m.ctrl.Call(_m, "ArchiveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) ArchiveBlockReferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ArchiveBlockReferences", arg0, arg1, arg2)
}

func (_m *MockBlockServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockBlockServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockBlockServer) GetUserQuotaInfo(ctx context.Context) (*IFCERFTUserQuotaInfo, error) {
	ret := _m.ctrl.Call(_m, "GetUserQuotaInfo", ctx)
	ret0, _ := ret[0].(*IFCERFTUserQuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockServerRecorder) GetUserQuotaInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserQuotaInfo", arg0)
}

// Mock of blockServerLocal interface
type MockblockServerLocal struct {
	ctrl     *gomock.Controller
	recorder *_MockblockServerLocalRecorder
}

// Recorder for MockblockServerLocal (not exported)
type _MockblockServerLocalRecorder struct {
	mock *MockblockServerLocal
}

func NewMockblockServerLocal(ctrl *gomock.Controller) *MockblockServerLocal {
	mock := &MockblockServerLocal{ctrl: ctrl}
	mock.recorder = &_MockblockServerLocalRecorder{mock}
	return mock
}

func (_m *MockblockServerLocal) EXPECT() *_MockblockServerLocalRecorder {
	return _m.recorder
}

func (_m *MockblockServerLocal) RefreshAuthToken(_param0 context.Context) {
	_m.ctrl.Call(_m, "RefreshAuthToken", _param0)
}

func (_mr *_MockblockServerLocalRecorder) RefreshAuthToken(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RefreshAuthToken", arg0)
}

func (_m *MockblockServerLocal) Get(ctx context.Context, id IFCERFTBlockID, tlfID IFCERFTTlfID, context IFCERFTBlockContext) ([]byte, IFCERFTBlockCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "Get", ctx, id, tlfID, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(IFCERFTBlockCryptKeyServerHalf)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockblockServerLocalRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3)
}

func (_m *MockblockServerLocal) Put(ctx context.Context, id IFCERFTBlockID, tlfID IFCERFTTlfID, context IFCERFTBlockContext, buf []byte, serverHalf IFCERFTBlockCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "Put", ctx, id, tlfID, context, buf, serverHalf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockblockServerLocalRecorder) Put(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockblockServerLocal) AddBlockReference(ctx context.Context, id IFCERFTBlockID, tlfID IFCERFTTlfID, context IFCERFTBlockContext) error {
	ret := _m.ctrl.Call(_m, "AddBlockReference", ctx, id, tlfID, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockblockServerLocalRecorder) AddBlockReference(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddBlockReference", arg0, arg1, arg2, arg3)
}

func (_m *MockblockServerLocal) RemoveBlockReference(ctx context.Context, tlfID IFCERFTTlfID, contexts map[IFCERFTBlockID][]IFCERFTBlockContext) (map[IFCERFTBlockID]int, error) {
	ret := _m.ctrl.Call(_m, "RemoveBlockReference", ctx, tlfID, contexts)
	ret0, _ := ret[0].(map[IFCERFTBlockID]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) RemoveBlockReference(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveBlockReference", arg0, arg1, arg2)
}

func (_m *MockblockServerLocal) ArchiveBlockReferences(ctx context.Context, tlfID IFCERFTTlfID, contexts map[IFCERFTBlockID][]IFCERFTBlockContext) error {
	ret := _m.ctrl.Call(_m, "ArchiveBlockReferences", ctx, tlfID, contexts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockblockServerLocalRecorder) ArchiveBlockReferences(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ArchiveBlockReferences", arg0, arg1, arg2)
}

func (_m *MockblockServerLocal) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockblockServerLocalRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockblockServerLocal) GetUserQuotaInfo(ctx context.Context) (*IFCERFTUserQuotaInfo, error) {
	ret := _m.ctrl.Call(_m, "GetUserQuotaInfo", ctx)
	ret0, _ := ret[0].(*IFCERFTUserQuotaInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) GetUserQuotaInfo(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUserQuotaInfo", arg0)
}

func (_m *MockblockServerLocal) getAll(tlfID IFCERFTTlfID) (map[IFCERFTBlockID]map[IFCERFTBlockRefNonce]blockRefLocalStatus, error) {
	ret := _m.ctrl.Call(_m, "getAll", tlfID)
	ret0, _ := ret[0].(map[IFCERFTBlockID]map[IFCERFTBlockRefNonce]blockRefLocalStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockblockServerLocalRecorder) getAll(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "getAll", arg0)
}

// Mock of BlockSplitter interface
type MockBlockSplitter struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockSplitterRecorder
}

// Recorder for MockBlockSplitter (not exported)
type _MockBlockSplitterRecorder struct {
	mock *MockBlockSplitter
}

func NewMockBlockSplitter(ctrl *gomock.Controller) *MockBlockSplitter {
	mock := &MockBlockSplitter{ctrl: ctrl}
	mock.recorder = &_MockBlockSplitterRecorder{mock}
	return mock
}

func (_m *MockBlockSplitter) EXPECT() *_MockBlockSplitterRecorder {
	return _m.recorder
}

func (_m *MockBlockSplitter) CopyUntilSplit(block *IFCERFTFileBlock, lastBlock bool, data []byte, off int64) int64 {
	ret := _m.ctrl.Call(_m, "CopyUntilSplit", block, lastBlock, data, off)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CopyUntilSplit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CopyUntilSplit", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockSplitter) CheckSplit(block *IFCERFTFileBlock) int64 {
	ret := _m.ctrl.Call(_m, "CheckSplit", block)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CheckSplit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckSplit", arg0)
}

func (_m *MockBlockSplitter) ShouldEmbedBlockChanges(bc *AddBPSize) bool {
	ret := _m.ctrl.Call(_m, "ShouldEmbedBlockChanges", bc)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) ShouldEmbedBlockChanges(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldEmbedBlockChanges", arg0)
}

// Mock of KeyServer interface
type MockKeyServer struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyServerRecorder
}

// Recorder for MockKeyServer (not exported)
type _MockKeyServerRecorder struct {
	mock *MockKeyServer
}

func NewMockKeyServer(ctrl *gomock.Controller) *MockKeyServer {
	mock := &MockKeyServer{ctrl: ctrl}
	mock.recorder = &_MockKeyServerRecorder{mock}
	return mock
}

func (_m *MockKeyServer) EXPECT() *_MockKeyServerRecorder {
	return _m.recorder
}

func (_m *MockKeyServer) GetTLFCryptKeyServerHalf(ctx context.Context, serverHalfID IFCERFTTLFCryptKeyServerHalfID, cryptPublicKey IFCERFTCryptPublicKey) (IFCERFTTLFCryptKeyServerHalf, error) {
	ret := _m.ctrl.Call(_m, "GetTLFCryptKeyServerHalf", ctx, serverHalfID, cryptPublicKey)
	ret0, _ := ret[0].(IFCERFTTLFCryptKeyServerHalf)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyServerRecorder) GetTLFCryptKeyServerHalf(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetTLFCryptKeyServerHalf", arg0, arg1, arg2)
}

func (_m *MockKeyServer) PutTLFCryptKeyServerHalves(ctx context.Context, serverKeyHalves map[protocol.UID]map[protocol.KID]IFCERFTTLFCryptKeyServerHalf) error {
	ret := _m.ctrl.Call(_m, "PutTLFCryptKeyServerHalves", ctx, serverKeyHalves)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyServerRecorder) PutTLFCryptKeyServerHalves(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutTLFCryptKeyServerHalves", arg0, arg1)
}

func (_m *MockKeyServer) DeleteTLFCryptKeyServerHalf(ctx context.Context, uid protocol.UID, kid protocol.KID, serverHalfID IFCERFTTLFCryptKeyServerHalfID) error {
	ret := _m.ctrl.Call(_m, "DeleteTLFCryptKeyServerHalf", ctx, uid, kid, serverHalfID)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyServerRecorder) DeleteTLFCryptKeyServerHalf(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteTLFCryptKeyServerHalf", arg0, arg1, arg2, arg3)
}

func (_m *MockKeyServer) Shutdown() {
	_m.ctrl.Call(_m, "Shutdown")
}

func (_mr *_MockKeyServerRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

// Mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *_MockObserverRecorder
}

// Recorder for MockObserver (not exported)
type _MockObserverRecorder struct {
	mock *MockObserver
}

func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &_MockObserverRecorder{mock}
	return mock
}

func (_m *MockObserver) EXPECT() *_MockObserverRecorder {
	return _m.recorder
}

func (_m *MockObserver) LocalChange(ctx context.Context, node IFCERFTNode, write WriteRange) {
	_m.ctrl.Call(_m, "LocalChange", ctx, node, write)
}

func (_mr *_MockObserverRecorder) LocalChange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LocalChange", arg0, arg1, arg2)
}

func (_m *MockObserver) BatchChanges(ctx context.Context, changes []IFCERFTNodeChange) {
	_m.ctrl.Call(_m, "BatchChanges", ctx, changes)
}

func (_mr *_MockObserverRecorder) BatchChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchChanges", arg0, arg1)
}

func (_m *MockObserver) TlfHandleChange(ctx context.Context, newHandle *IFCERFTTlfHandle) {
	_m.ctrl.Call(_m, "TlfHandleChange", ctx, newHandle)
}

func (_mr *_MockObserverRecorder) TlfHandleChange(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TlfHandleChange", arg0, arg1)
}

// Mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *_MockNotifierRecorder
}

// Recorder for MockNotifier (not exported)
type _MockNotifierRecorder struct {
	mock *MockNotifier
}

func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &_MockNotifierRecorder{mock}
	return mock
}

func (_m *MockNotifier) EXPECT() *_MockNotifierRecorder {
	return _m.recorder
}

func (_m *MockNotifier) RegisterForChanges(folderBranches []IFCERFTFolderBranch, obs IFCERFTObserver) error {
	ret := _m.ctrl.Call(_m, "RegisterForChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) RegisterForChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForChanges", arg0, arg1)
}

func (_m *MockNotifier) UnregisterFromChanges(folderBranches []IFCERFTFolderBranch, obs IFCERFTObserver) error {
	ret := _m.ctrl.Call(_m, "UnregisterFromChanges", folderBranches, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) UnregisterFromChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnregisterFromChanges", arg0, arg1)
}

// Mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *_MockClockRecorder
}

// Recorder for MockClock (not exported)
type _MockClockRecorder struct {
	mock *MockClock
}

func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &_MockClockRecorder{mock}
	return mock
}

func (_m *MockClock) EXPECT() *_MockClockRecorder {
	return _m.recorder
}

func (_m *MockClock) Now() time.Time {
	ret := _m.ctrl.Call(_m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

func (_mr *_MockClockRecorder) Now() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Now")
}

// Mock of ConflictRenamer interface
type MockConflictRenamer struct {
	ctrl     *gomock.Controller
	recorder *_MockConflictRenamerRecorder
}

// Recorder for MockConflictRenamer (not exported)
type _MockConflictRenamerRecorder struct {
	mock *MockConflictRenamer
}

func NewMockConflictRenamer(ctrl *gomock.Controller) *MockConflictRenamer {
	mock := &MockConflictRenamer{ctrl: ctrl}
	mock.recorder = &_MockConflictRenamerRecorder{mock}
	return mock
}

func (_m *MockConflictRenamer) EXPECT() *_MockConflictRenamerRecorder {
	return _m.recorder
}

func (_m *MockConflictRenamer) ConflictRename(op IFCERFTOps, original string) string {
	ret := _m.ctrl.Call(_m, "ConflictRename", op, original)
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockConflictRenamerRecorder) ConflictRename(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConflictRename", arg0, arg1)
}

// Mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockConfigRecorder
}

// Recorder for MockConfig (not exported)
type _MockConfigRecorder struct {
	mock *MockConfig
}

func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &_MockConfigRecorder{mock}
	return mock
}

func (_m *MockConfig) EXPECT() *_MockConfigRecorder {
	return _m.recorder
}

func (_m *MockConfig) KBFSOps() IFCERFTKBFSOps {
	ret := _m.ctrl.Call(_m, "KBFSOps")
	ret0, _ := ret[0].(IFCERFTKBFSOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KBFSOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBFSOps")
}

func (_m *MockConfig) SetKBFSOps(_param0 IFCERFTKBFSOps) {
	_m.ctrl.Call(_m, "SetKBFSOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKBFSOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBFSOps", arg0)
}

func (_m *MockConfig) KBPKI() IFCERFTKBPKI {
	ret := _m.ctrl.Call(_m, "KBPKI")
	ret0, _ := ret[0].(IFCERFTKBPKI)
	return ret0
}

func (_mr *_MockConfigRecorder) KBPKI() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBPKI")
}

func (_m *MockConfig) SetKBPKI(_param0 IFCERFTKBPKI) {
	_m.ctrl.Call(_m, "SetKBPKI", _param0)
}

func (_mr *_MockConfigRecorder) SetKBPKI(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBPKI", arg0)
}

func (_m *MockConfig) KeyManager() IFCERFTKeyManager {
	ret := _m.ctrl.Call(_m, "KeyManager")
	ret0, _ := ret[0].(IFCERFTKeyManager)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyManager")
}

func (_m *MockConfig) SetKeyManager(_param0 IFCERFTKeyManager) {
	_m.ctrl.Call(_m, "SetKeyManager", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyManager", arg0)
}

func (_m *MockConfig) Reporter() IFCERFTReporter {
	ret := _m.ctrl.Call(_m, "Reporter")
	ret0, _ := ret[0].(IFCERFTReporter)
	return ret0
}

func (_mr *_MockConfigRecorder) Reporter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reporter")
}

func (_m *MockConfig) SetReporter(_param0 IFCERFTReporter) {
	_m.ctrl.Call(_m, "SetReporter", _param0)
}

func (_mr *_MockConfigRecorder) SetReporter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReporter", arg0)
}

func (_m *MockConfig) MDCache() IFCERFTMDCache {
	ret := _m.ctrl.Call(_m, "MDCache")
	ret0, _ := ret[0].(IFCERFTMDCache)
	return ret0
}

func (_mr *_MockConfigRecorder) MDCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDCache")
}

func (_m *MockConfig) SetMDCache(_param0 IFCERFTMDCache) {
	_m.ctrl.Call(_m, "SetMDCache", _param0)
}

func (_mr *_MockConfigRecorder) SetMDCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDCache", arg0)
}

func (_m *MockConfig) KeyCache() IFCERFTKeyCache {
	ret := _m.ctrl.Call(_m, "KeyCache")
	ret0, _ := ret[0].(IFCERFTKeyCache)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyCache")
}

func (_m *MockConfig) SetKeyCache(_param0 IFCERFTKeyCache) {
	_m.ctrl.Call(_m, "SetKeyCache", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyCache", arg0)
}

func (_m *MockConfig) BlockCache() IFCERFTBlockCache {
	ret := _m.ctrl.Call(_m, "BlockCache")
	ret0, _ := ret[0].(IFCERFTBlockCache)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockCache")
}

func (_m *MockConfig) SetBlockCache(_param0 IFCERFTBlockCache) {
	_m.ctrl.Call(_m, "SetBlockCache", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockCache", arg0)
}

func (_m *MockConfig) DirtyBlockCache() IFCERFTDirtyBlockCache {
	ret := _m.ctrl.Call(_m, "DirtyBlockCache")
	ret0, _ := ret[0].(IFCERFTDirtyBlockCache)
	return ret0
}

func (_mr *_MockConfigRecorder) DirtyBlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DirtyBlockCache")
}

func (_m *MockConfig) SetDirtyBlockCache(_param0 IFCERFTDirtyBlockCache) {
	_m.ctrl.Call(_m, "SetDirtyBlockCache", _param0)
}

func (_mr *_MockConfigRecorder) SetDirtyBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetDirtyBlockCache", arg0)
}

func (_m *MockConfig) Crypto() IFCERFTCrypto {
	ret := _m.ctrl.Call(_m, "Crypto")
	ret0, _ := ret[0].(IFCERFTCrypto)
	return ret0
}

func (_mr *_MockConfigRecorder) Crypto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Crypto")
}

func (_m *MockConfig) SetCrypto(_param0 IFCERFTCrypto) {
	_m.ctrl.Call(_m, "SetCrypto", _param0)
}

func (_mr *_MockConfigRecorder) SetCrypto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCrypto", arg0)
}

func (_m *MockConfig) Codec() IFCERFTCodec {
	ret := _m.ctrl.Call(_m, "Codec")
	ret0, _ := ret[0].(IFCERFTCodec)
	return ret0
}

func (_mr *_MockConfigRecorder) Codec() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Codec")
}

func (_m *MockConfig) SetCodec(_param0 IFCERFTCodec) {
	_m.ctrl.Call(_m, "SetCodec", _param0)
}

func (_mr *_MockConfigRecorder) SetCodec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCodec", arg0)
}

func (_m *MockConfig) MDOps() IFCERFTMDOps {
	ret := _m.ctrl.Call(_m, "MDOps")
	ret0, _ := ret[0].(IFCERFTMDOps)
	return ret0
}

func (_mr *_MockConfigRecorder) MDOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDOps")
}

func (_m *MockConfig) SetMDOps(_param0 IFCERFTMDOps) {
	_m.ctrl.Call(_m, "SetMDOps", _param0)
}

func (_mr *_MockConfigRecorder) SetMDOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDOps", arg0)
}

func (_m *MockConfig) KeyOps() IFCERFTKeyOps {
	ret := _m.ctrl.Call(_m, "KeyOps")
	ret0, _ := ret[0].(IFCERFTKeyOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyOps")
}

func (_m *MockConfig) SetKeyOps(_param0 IFCERFTKeyOps) {
	_m.ctrl.Call(_m, "SetKeyOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyOps", arg0)
}

func (_m *MockConfig) BlockOps() IFCERFTBlockOps {
	ret := _m.ctrl.Call(_m, "BlockOps")
	ret0, _ := ret[0].(IFCERFTBlockOps)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockOps")
}

func (_m *MockConfig) SetBlockOps(_param0 IFCERFTBlockOps) {
	_m.ctrl.Call(_m, "SetBlockOps", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockOps", arg0)
}

func (_m *MockConfig) MDServer() IFCERFTMDServer {
	ret := _m.ctrl.Call(_m, "MDServer")
	ret0, _ := ret[0].(IFCERFTMDServer)
	return ret0
}

func (_mr *_MockConfigRecorder) MDServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDServer")
}

func (_m *MockConfig) SetMDServer(_param0 IFCERFTMDServer) {
	_m.ctrl.Call(_m, "SetMDServer", _param0)
}

func (_mr *_MockConfigRecorder) SetMDServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDServer", arg0)
}

func (_m *MockConfig) BlockServer() IFCERFTBlockServer {
	ret := _m.ctrl.Call(_m, "BlockServer")
	ret0, _ := ret[0].(IFCERFTBlockServer)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockServer")
}

func (_m *MockConfig) SetBlockServer(_param0 IFCERFTBlockServer) {
	_m.ctrl.Call(_m, "SetBlockServer", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockServer", arg0)
}

func (_m *MockConfig) KeyServer() IFCERFTKeyServer {
	ret := _m.ctrl.Call(_m, "KeyServer")
	ret0, _ := ret[0].(IFCERFTKeyServer)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyServer")
}

func (_m *MockConfig) SetKeyServer(_param0 IFCERFTKeyServer) {
	_m.ctrl.Call(_m, "SetKeyServer", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyServer", arg0)
}

func (_m *MockConfig) KeybaseDaemon() IFCERFTKeybaseDaemon {
	ret := _m.ctrl.Call(_m, "KeybaseDaemon")
	ret0, _ := ret[0].(IFCERFTKeybaseDaemon)
	return ret0
}

func (_mr *_MockConfigRecorder) KeybaseDaemon() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeybaseDaemon")
}

func (_m *MockConfig) SetKeybaseDaemon(_param0 IFCERFTKeybaseDaemon) {
	_m.ctrl.Call(_m, "SetKeybaseDaemon", _param0)
}

func (_mr *_MockConfigRecorder) SetKeybaseDaemon(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeybaseDaemon", arg0)
}

func (_m *MockConfig) BlockSplitter() IFCERFTBlockSplitter {
	ret := _m.ctrl.Call(_m, "BlockSplitter")
	ret0, _ := ret[0].(IFCERFTBlockSplitter)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockSplitter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSplitter")
}

func (_m *MockConfig) SetBlockSplitter(_param0 IFCERFTBlockSplitter) {
	_m.ctrl.Call(_m, "SetBlockSplitter", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockSplitter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockSplitter", arg0)
}

func (_m *MockConfig) Notifier() IFCERFTNotifier {
	ret := _m.ctrl.Call(_m, "Notifier")
	ret0, _ := ret[0].(IFCERFTNotifier)
	return ret0
}

func (_mr *_MockConfigRecorder) Notifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notifier")
}

func (_m *MockConfig) SetNotifier(_param0 IFCERFTNotifier) {
	_m.ctrl.Call(_m, "SetNotifier", _param0)
}

func (_mr *_MockConfigRecorder) SetNotifier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNotifier", arg0)
}

func (_m *MockConfig) Clock() IFCERFTClock {
	ret := _m.ctrl.Call(_m, "Clock")
	ret0, _ := ret[0].(IFCERFTClock)
	return ret0
}

func (_mr *_MockConfigRecorder) Clock() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clock")
}

func (_m *MockConfig) SetClock(_param0 IFCERFTClock) {
	_m.ctrl.Call(_m, "SetClock", _param0)
}

func (_mr *_MockConfigRecorder) SetClock(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetClock", arg0)
}

func (_m *MockConfig) ConflictRenamer() IFCERFTConflictRenamer {
	ret := _m.ctrl.Call(_m, "ConflictRenamer")
	ret0, _ := ret[0].(IFCERFTConflictRenamer)
	return ret0
}

func (_mr *_MockConfigRecorder) ConflictRenamer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ConflictRenamer")
}

func (_m *MockConfig) SetConflictRenamer(_param0 IFCERFTConflictRenamer) {
	_m.ctrl.Call(_m, "SetConflictRenamer", _param0)
}

func (_mr *_MockConfigRecorder) SetConflictRenamer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetConflictRenamer", arg0)
}

func (_m *MockConfig) MetadataVersion() IFCERFTMetadataVer {
	ret := _m.ctrl.Call(_m, "MetadataVersion")
	ret0, _ := ret[0].(IFCERFTMetadataVer)
	return ret0
}

func (_mr *_MockConfigRecorder) MetadataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MetadataVersion")
}

func (_m *MockConfig) DataVersion() IFCERFTDataVer {
	ret := _m.ctrl.Call(_m, "DataVersion")
	ret0, _ := ret[0].(IFCERFTDataVer)
	return ret0
}

func (_mr *_MockConfigRecorder) DataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataVersion")
}

func (_m *MockConfig) RekeyQueue() IFCERFTRekeyQueue {
	ret := _m.ctrl.Call(_m, "RekeyQueue")
	ret0, _ := ret[0].(IFCERFTRekeyQueue)
	return ret0
}

func (_mr *_MockConfigRecorder) RekeyQueue() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RekeyQueue")
}

func (_m *MockConfig) SetRekeyQueue(_param0 IFCERFTRekeyQueue) {
	_m.ctrl.Call(_m, "SetRekeyQueue", _param0)
}

func (_mr *_MockConfigRecorder) SetRekeyQueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetRekeyQueue", arg0)
}

func (_m *MockConfig) ReqsBufSize() int {
	ret := _m.ctrl.Call(_m, "ReqsBufSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockConfigRecorder) ReqsBufSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReqsBufSize")
}

func (_m *MockConfig) MaxFileBytes() uint64 {
	ret := _m.ctrl.Call(_m, "MaxFileBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockConfigRecorder) MaxFileBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxFileBytes")
}

func (_m *MockConfig) MaxNameBytes() uint32 {
	ret := _m.ctrl.Call(_m, "MaxNameBytes")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockConfigRecorder) MaxNameBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxNameBytes")
}

func (_m *MockConfig) MaxDirBytes() uint64 {
	ret := _m.ctrl.Call(_m, "MaxDirBytes")
	ret0, _ := ret[0].(uint64)
	return ret0
}

func (_mr *_MockConfigRecorder) MaxDirBytes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MaxDirBytes")
}

func (_m *MockConfig) DoBackgroundFlushes() bool {
	ret := _m.ctrl.Call(_m, "DoBackgroundFlushes")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockConfigRecorder) DoBackgroundFlushes() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DoBackgroundFlushes")
}

func (_m *MockConfig) RekeyWithPromptWaitTime() time.Duration {
	ret := _m.ctrl.Call(_m, "RekeyWithPromptWaitTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) RekeyWithPromptWaitTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RekeyWithPromptWaitTime")
}

func (_m *MockConfig) QuotaReclamationPeriod() time.Duration {
	ret := _m.ctrl.Call(_m, "QuotaReclamationPeriod")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) QuotaReclamationPeriod() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QuotaReclamationPeriod")
}

func (_m *MockConfig) QuotaReclamationMinUnrefAge() time.Duration {
	ret := _m.ctrl.Call(_m, "QuotaReclamationMinUnrefAge")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) QuotaReclamationMinUnrefAge() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QuotaReclamationMinUnrefAge")
}

func (_m *MockConfig) ResetCaches() {
	_m.ctrl.Call(_m, "ResetCaches")
}

func (_mr *_MockConfigRecorder) ResetCaches() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResetCaches")
}

func (_m *MockConfig) MakeLogger(module string) logger.Logger {
	ret := _m.ctrl.Call(_m, "MakeLogger", module)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

func (_mr *_MockConfigRecorder) MakeLogger(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MakeLogger", arg0)
}

func (_m *MockConfig) SetLoggerMaker(_param0 func(string) logger.Logger) {
	_m.ctrl.Call(_m, "SetLoggerMaker", _param0)
}

func (_mr *_MockConfigRecorder) SetLoggerMaker(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetLoggerMaker", arg0)
}

func (_m *MockConfig) MetricsRegistry() go_metrics.Registry {
	ret := _m.ctrl.Call(_m, "MetricsRegistry")
	ret0, _ := ret[0].(go_metrics.Registry)
	return ret0
}

func (_mr *_MockConfigRecorder) MetricsRegistry() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MetricsRegistry")
}

func (_m *MockConfig) SetMetricsRegistry(_param0 go_metrics.Registry) {
	_m.ctrl.Call(_m, "SetMetricsRegistry", _param0)
}

func (_mr *_MockConfigRecorder) SetMetricsRegistry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMetricsRegistry", arg0)
}

func (_m *MockConfig) TLFValidDuration() time.Duration {
	ret := _m.ctrl.Call(_m, "TLFValidDuration")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

func (_mr *_MockConfigRecorder) TLFValidDuration() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "TLFValidDuration")
}

func (_m *MockConfig) SetTLFValidDuration(_param0 time.Duration) {
	_m.ctrl.Call(_m, "SetTLFValidDuration", _param0)
}

func (_mr *_MockConfigRecorder) SetTLFValidDuration(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetTLFValidDuration", arg0)
}

func (_m *MockConfig) Shutdown() error {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockConfigRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockConfig) CheckStateOnShutdown() bool {
	ret := _m.ctrl.Call(_m, "CheckStateOnShutdown")
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockConfigRecorder) CheckStateOnShutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckStateOnShutdown")
}

// Mock of NodeCache interface
type MockNodeCache struct {
	ctrl     *gomock.Controller
	recorder *_MockNodeCacheRecorder
}

// Recorder for MockNodeCache (not exported)
type _MockNodeCacheRecorder struct {
	mock *MockNodeCache
}

func NewMockNodeCache(ctrl *gomock.Controller) *MockNodeCache {
	mock := &MockNodeCache{ctrl: ctrl}
	mock.recorder = &_MockNodeCacheRecorder{mock}
	return mock
}

func (_m *MockNodeCache) EXPECT() *_MockNodeCacheRecorder {
	return _m.recorder
}

func (_m *MockNodeCache) GetOrCreate(ptr IFCERFTBlockPointer, name string, parent IFCERFTNode) (IFCERFTNode, error) {
	ret := _m.ctrl.Call(_m, "GetOrCreate", ptr, name, parent)
	ret0, _ := ret[0].(IFCERFTNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNodeCacheRecorder) GetOrCreate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOrCreate", arg0, arg1, arg2)
}

func (_m *MockNodeCache) Get(ref IFCERFTBlockRef) IFCERFTNode {
	ret := _m.ctrl.Call(_m, "Get", ref)
	ret0, _ := ret[0].(IFCERFTNode)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockNodeCache) UpdatePointer(oldRef IFCERFTBlockRef, newPtr IFCERFTBlockPointer) {
	_m.ctrl.Call(_m, "UpdatePointer", oldRef, newPtr)
}

func (_mr *_MockNodeCacheRecorder) UpdatePointer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdatePointer", arg0, arg1)
}

func (_m *MockNodeCache) Move(ref IFCERFTBlockRef, newParent IFCERFTNode, newName string) error {
	ret := _m.ctrl.Call(_m, "Move", ref, newParent, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) Move(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Move", arg0, arg1, arg2)
}

func (_m *MockNodeCache) Unlink(ref IFCERFTBlockRef, oldPath IFCERFTPath) {
	_m.ctrl.Call(_m, "Unlink", ref, oldPath)
}

func (_mr *_MockNodeCacheRecorder) Unlink(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unlink", arg0, arg1)
}

func (_m *MockNodeCache) PathFromNode(node IFCERFTNode) IFCERFTPath {
	ret := _m.ctrl.Call(_m, "PathFromNode", node)
	ret0, _ := ret[0].(IFCERFTPath)
	return ret0
}

func (_mr *_MockNodeCacheRecorder) PathFromNode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PathFromNode", arg0)
}

// Mock of crAction interface
type MockcrAction struct {
	ctrl     *gomock.Controller
	recorder *_MockcrActionRecorder
}

// Recorder for MockcrAction (not exported)
type _MockcrActionRecorder struct {
	mock *MockcrAction
}

func NewMockcrAction(ctrl *gomock.Controller) *MockcrAction {
	mock := &MockcrAction{ctrl: ctrl}
	mock.recorder = &_MockcrActionRecorder{mock}
	return mock
}

func (_m *MockcrAction) EXPECT() *_MockcrActionRecorder {
	return _m.recorder
}

func (_m *MockcrAction) swapUnmergedBlock(unmergedChains *IFCERFTCrChains, mergedChains *IFCERFTCrChains, unmergedBlock *IFCERFTDirBlock) (bool, IFCERFTBlockPointer, error) {
	ret := _m.ctrl.Call(_m, "swapUnmergedBlock", unmergedChains, mergedChains, unmergedBlock)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(IFCERFTBlockPointer)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockcrActionRecorder) swapUnmergedBlock(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "swapUnmergedBlock", arg0, arg1, arg2)
}

func (_m *MockcrAction) do(ctx context.Context, unmergedCopier fileBlockDeepCopier, mergedCopier fileBlockDeepCopier, unmergedBlock *IFCERFTDirBlock, mergedBlock *IFCERFTDirBlock) error {
	ret := _m.ctrl.Call(_m, "do", ctx, unmergedCopier, mergedCopier, unmergedBlock, mergedBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcrActionRecorder) do(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "do", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockcrAction) updateOps(unmergedMostRecent IFCERFTBlockPointer, mergedMostRecent IFCERFTBlockPointer, unmergedBlock *IFCERFTDirBlock, mergedBlock *IFCERFTDirBlock, unmergedChains *IFCERFTCrChains, mergedChains *IFCERFTCrChains) error {
	ret := _m.ctrl.Call(_m, "updateOps", unmergedMostRecent, mergedMostRecent, unmergedBlock, mergedBlock, unmergedChains, mergedChains)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockcrActionRecorder) updateOps(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "updateOps", arg0, arg1, arg2, arg3, arg4, arg5)
}

func (_m *MockcrAction) String() string {
	ret := _m.ctrl.Call(_m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockcrActionRecorder) String() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "String")
}

// Mock of RekeyQueue interface
type MockRekeyQueue struct {
	ctrl     *gomock.Controller
	recorder *_MockRekeyQueueRecorder
}

// Recorder for MockRekeyQueue (not exported)
type _MockRekeyQueueRecorder struct {
	mock *MockRekeyQueue
}

func NewMockRekeyQueue(ctrl *gomock.Controller) *MockRekeyQueue {
	mock := &MockRekeyQueue{ctrl: ctrl}
	mock.recorder = &_MockRekeyQueueRecorder{mock}
	return mock
}

func (_m *MockRekeyQueue) EXPECT() *_MockRekeyQueueRecorder {
	return _m.recorder
}

func (_m *MockRekeyQueue) Enqueue(_param0 IFCERFTTlfID) <-chan error {
	ret := _m.ctrl.Call(_m, "Enqueue", _param0)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockRekeyQueueRecorder) Enqueue(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Enqueue", arg0)
}

func (_m *MockRekeyQueue) IsRekeyPending(_param0 IFCERFTTlfID) bool {
	ret := _m.ctrl.Call(_m, "IsRekeyPending", _param0)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockRekeyQueueRecorder) IsRekeyPending(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsRekeyPending", arg0)
}

func (_m *MockRekeyQueue) GetRekeyChannel(id IFCERFTTlfID) <-chan error {
	ret := _m.ctrl.Call(_m, "GetRekeyChannel", id)
	ret0, _ := ret[0].(<-chan error)
	return ret0
}

func (_mr *_MockRekeyQueueRecorder) GetRekeyChannel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRekeyChannel", arg0)
}

func (_m *MockRekeyQueue) Clear() {
	_m.ctrl.Call(_m, "Clear")
}

func (_mr *_MockRekeyQueueRecorder) Clear() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Clear")
}

func (_m *MockRekeyQueue) Wait(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "Wait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockRekeyQueueRecorder) Wait(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wait", arg0)
}
