// Automatically generated by MockGen. DO NOT EDIT!
// Source: interfaces.go

package libkbfs

import (
	gomock "code.google.com/p/gomock/gomock"
	fmt "fmt"
	libkb "github.com/keybase/client/go/libkb"
	time "time"
)

// Mock of Block interface
type MockBlock struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockRecorder
}

// Recorder for MockBlock (not exported)
type _MockBlockRecorder struct {
	mock *MockBlock
}

func NewMockBlock(ctrl *gomock.Controller) *MockBlock {
	mock := &MockBlock{ctrl: ctrl}
	mock.recorder = &_MockBlockRecorder{mock}
	return mock
}

func (_m *MockBlock) EXPECT() *_MockBlockRecorder {
	return _m.recorder
}

// Mock of BlockContext interface
type MockBlockContext struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockContextRecorder
}

// Recorder for MockBlockContext (not exported)
type _MockBlockContextRecorder struct {
	mock *MockBlockContext
}

func NewMockBlockContext(ctrl *gomock.Controller) *MockBlockContext {
	mock := &MockBlockContext{ctrl: ctrl}
	mock.recorder = &_MockBlockContextRecorder{mock}
	return mock
}

func (_m *MockBlockContext) EXPECT() *_MockBlockContextRecorder {
	return _m.recorder
}

func (_m *MockBlockContext) GetKeyVer() KeyVer {
	ret := _m.ctrl.Call(_m, "GetKeyVer")
	ret0, _ := ret[0].(KeyVer)
	return ret0
}

func (_mr *_MockBlockContextRecorder) GetKeyVer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetKeyVer")
}

func (_m *MockBlockContext) GetVer() Ver {
	ret := _m.ctrl.Call(_m, "GetVer")
	ret0, _ := ret[0].(Ver)
	return ret0
}

func (_mr *_MockBlockContextRecorder) GetVer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetVer")
}

func (_m *MockBlockContext) GetWriter() libkb.UID {
	ret := _m.ctrl.Call(_m, "GetWriter")
	ret0, _ := ret[0].(libkb.UID)
	return ret0
}

func (_mr *_MockBlockContextRecorder) GetWriter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetWriter")
}

func (_m *MockBlockContext) GetQuotaSize() uint32 {
	ret := _m.ctrl.Call(_m, "GetQuotaSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

func (_mr *_MockBlockContextRecorder) GetQuotaSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetQuotaSize")
}

// Mock of KBFSOps interface
type MockKBFSOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKBFSOpsRecorder
}

// Recorder for MockKBFSOps (not exported)
type _MockKBFSOpsRecorder struct {
	mock *MockKBFSOps
}

func NewMockKBFSOps(ctrl *gomock.Controller) *MockKBFSOps {
	mock := &MockKBFSOps{ctrl: ctrl}
	mock.recorder = &_MockKBFSOpsRecorder{mock}
	return mock
}

func (_m *MockKBFSOps) EXPECT() *_MockKBFSOpsRecorder {
	return _m.recorder
}

func (_m *MockKBFSOps) GetFavDirs() ([]DirId, error) {
	ret := _m.ctrl.Call(_m, "GetFavDirs")
	ret0, _ := ret[0].([]DirId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetFavDirs() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFavDirs")
}

func (_m *MockKBFSOps) GetRootMDForHandle(dirHandle *DirHandle) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetRootMDForHandle", dirHandle)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetRootMDForHandle(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRootMDForHandle", arg0)
}

func (_m *MockKBFSOps) GetRootMD(dirId DirId) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetRootMD", dirId)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetRootMD(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetRootMD", arg0)
}

func (_m *MockKBFSOps) GetDir(dir Path) (*DirBlock, error) {
	ret := _m.ctrl.Call(_m, "GetDir", dir)
	ret0, _ := ret[0].(*DirBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) GetDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDir", arg0)
}

func (_m *MockKBFSOps) CreateDir(dir Path, path string) (Path, DirEntry, error) {
	ret := _m.ctrl.Call(_m, "CreateDir", dir, path)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateDir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDir", arg0, arg1)
}

func (_m *MockKBFSOps) CreateFile(dir Path, path string, isEx bool) (Path, DirEntry, error) {
	ret := _m.ctrl.Call(_m, "CreateFile", dir, path, isEx)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateFile", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) CreateLink(dir Path, fromPath string, toPath string) (Path, DirEntry, error) {
	ret := _m.ctrl.Call(_m, "CreateLink", dir, fromPath, toPath)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(DirEntry)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) CreateLink(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateLink", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) RemoveDir(dir Path) (Path, error) {
	ret := _m.ctrl.Call(_m, "RemoveDir", dir)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) RemoveDir(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveDir", arg0)
}

func (_m *MockKBFSOps) RemoveEntry(file Path) (Path, error) {
	ret := _m.ctrl.Call(_m, "RemoveEntry", file)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) RemoveEntry(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveEntry", arg0)
}

func (_m *MockKBFSOps) Rename(oldParent Path, oldName string, newParent Path, newName string) (Path, Path, error) {
	ret := _m.ctrl.Call(_m, "Rename", oldParent, oldName, newParent, newName)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(Path)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockKBFSOpsRecorder) Rename(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rename", arg0, arg1, arg2, arg3)
}

func (_m *MockKBFSOps) Read(file Path, dest []byte, off int64) (int64, error) {
	ret := _m.ctrl.Call(_m, "Read", file, dest, off)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Read(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Write(file Path, data []byte, off int64) error {
	ret := _m.ctrl.Call(_m, "Write", file, data, off)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Write(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Write", arg0, arg1, arg2)
}

func (_m *MockKBFSOps) Truncate(file Path, size uint64) error {
	ret := _m.ctrl.Call(_m, "Truncate", file, size)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKBFSOpsRecorder) Truncate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Truncate", arg0, arg1)
}

func (_m *MockKBFSOps) SetEx(file Path, ex bool) (Path, error) {
	ret := _m.ctrl.Call(_m, "SetEx", file, ex)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) SetEx(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetEx", arg0, arg1)
}

func (_m *MockKBFSOps) SetMtime(file Path, mtime *time.Time) (Path, error) {
	ret := _m.ctrl.Call(_m, "SetMtime", file, mtime)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) SetMtime(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMtime", arg0, arg1)
}

func (_m *MockKBFSOps) Sync(file Path) (Path, error) {
	ret := _m.ctrl.Call(_m, "Sync", file)
	ret0, _ := ret[0].(Path)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBFSOpsRecorder) Sync(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sync", arg0)
}

// Mock of KBPKI interface
type MockKBPKI struct {
	ctrl     *gomock.Controller
	recorder *_MockKBPKIRecorder
}

// Recorder for MockKBPKI (not exported)
type _MockKBPKIRecorder struct {
	mock *MockKBPKI
}

func NewMockKBPKI(ctrl *gomock.Controller) *MockKBPKI {
	mock := &MockKBPKI{ctrl: ctrl}
	mock.recorder = &_MockKBPKIRecorder{mock}
	return mock
}

func (_m *MockKBPKI) EXPECT() *_MockKBPKIRecorder {
	return _m.recorder
}

func (_m *MockKBPKI) ResolveAssertion(input string) (*libkb.User, error) {
	ret := _m.ctrl.Call(_m, "ResolveAssertion", input)
	ret0, _ := ret[0].(*libkb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) ResolveAssertion(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResolveAssertion", arg0)
}

func (_m *MockKBPKI) GetUser(uid libkb.UID) (*libkb.User, error) {
	ret := _m.ctrl.Call(_m, "GetUser", uid)
	ret0, _ := ret[0].(*libkb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUser", arg0)
}

func (_m *MockKBPKI) GetSession() (*libkb.Session, error) {
	ret := _m.ctrl.Call(_m, "GetSession")
	ret0, _ := ret[0].(*libkb.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetSession() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSession")
}

func (_m *MockKBPKI) GetLoggedInUser() (libkb.UID, error) {
	ret := _m.ctrl.Call(_m, "GetLoggedInUser")
	ret0, _ := ret[0].(libkb.UID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetLoggedInUser() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetLoggedInUser")
}

func (_m *MockKBPKI) GetDeviceSibKeys(user *libkb.User) ([]Key, error) {
	ret := _m.ctrl.Call(_m, "GetDeviceSibKeys", user)
	ret0, _ := ret[0].([]Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetDeviceSibKeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeviceSibKeys", arg0)
}

func (_m *MockKBPKI) GetDeviceSubKeys(user *libkb.User) ([]Key, error) {
	ret := _m.ctrl.Call(_m, "GetDeviceSubKeys", user)
	ret0, _ := ret[0].([]Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetDeviceSubKeys(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeviceSubKeys", arg0)
}

func (_m *MockKBPKI) GetPublicSigningKey(user *libkb.User) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetPublicSigningKey", user)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetPublicSigningKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPublicSigningKey", arg0)
}

func (_m *MockKBPKI) GetDeviceSubkeyKid() (KID, error) {
	ret := _m.ctrl.Call(_m, "GetDeviceSubkeyKid")
	ret0, _ := ret[0].(KID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKBPKIRecorder) GetDeviceSubkeyKid() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDeviceSubkeyKid")
}

// Mock of KeyManager interface
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyManagerRecorder
}

// Recorder for MockKeyManager (not exported)
type _MockKeyManagerRecorder struct {
	mock *MockKeyManager
}

func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &_MockKeyManagerRecorder{mock}
	return mock
}

func (_m *MockKeyManager) EXPECT() *_MockKeyManagerRecorder {
	return _m.recorder
}

func (_m *MockKeyManager) GetSecretKey(dir Path, md *RootMetadata) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetSecretKey", dir, md)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetSecretKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecretKey", arg0, arg1)
}

func (_m *MockKeyManager) GetSecretBlockKey(dir Path, id BlockId, md *RootMetadata) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetSecretBlockKey", dir, id, md)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyManagerRecorder) GetSecretBlockKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetSecretBlockKey", arg0, arg1, arg2)
}

func (_m *MockKeyManager) Rekey(md *RootMetadata) error {
	ret := _m.ctrl.Call(_m, "Rekey", md)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyManagerRecorder) Rekey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Rekey", arg0)
}

// Mock of Reporter interface
type MockReporter struct {
	ctrl     *gomock.Controller
	recorder *_MockReporterRecorder
}

// Recorder for MockReporter (not exported)
type _MockReporterRecorder struct {
	mock *MockReporter
}

func NewMockReporter(ctrl *gomock.Controller) *MockReporter {
	mock := &MockReporter{ctrl: ctrl}
	mock.recorder = &_MockReporterRecorder{mock}
	return mock
}

func (_m *MockReporter) EXPECT() *_MockReporterRecorder {
	return _m.recorder
}

func (_m *MockReporter) Report(level ReportingLevel, message fmt.Stringer) {
	_m.ctrl.Call(_m, "Report", level, message)
}

func (_mr *_MockReporterRecorder) Report(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Report", arg0, arg1)
}

func (_m *MockReporter) LastError() (string, *time.Time) {
	ret := _m.ctrl.Call(_m, "LastError")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*time.Time)
	return ret0, ret1
}

func (_mr *_MockReporterRecorder) LastError() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LastError")
}

// Mock of MDCache interface
type MockMDCache struct {
	ctrl     *gomock.Controller
	recorder *_MockMDCacheRecorder
}

// Recorder for MockMDCache (not exported)
type _MockMDCacheRecorder struct {
	mock *MockMDCache
}

func NewMockMDCache(ctrl *gomock.Controller) *MockMDCache {
	mock := &MockMDCache{ctrl: ctrl}
	mock.recorder = &_MockMDCacheRecorder{mock}
	return mock
}

func (_m *MockMDCache) EXPECT() *_MockMDCacheRecorder {
	return _m.recorder
}

func (_m *MockMDCache) Get(id MDId) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockMDCache) Put(id MDId, md *RootMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", id, md)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDCacheRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

// Mock of KeyCache interface
type MockKeyCache struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyCacheRecorder
}

// Recorder for MockKeyCache (not exported)
type _MockKeyCacheRecorder struct {
	mock *MockKeyCache
}

func NewMockKeyCache(ctrl *gomock.Controller) *MockKeyCache {
	mock := &MockKeyCache{ctrl: ctrl}
	mock.recorder = &_MockKeyCacheRecorder{mock}
	return mock
}

func (_m *MockKeyCache) EXPECT() *_MockKeyCacheRecorder {
	return _m.recorder
}

func (_m *MockKeyCache) GetBlockKey(id BlockId) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetBlockKey", id)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyCacheRecorder) GetBlockKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBlockKey", arg0)
}

func (_m *MockKeyCache) PutBlockKey(id BlockId, key Key) error {
	ret := _m.ctrl.Call(_m, "PutBlockKey", id, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyCacheRecorder) PutBlockKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutBlockKey", arg0, arg1)
}

func (_m *MockKeyCache) GetDirKey(_param0 DirId, _param1 KeyVer) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetDirKey", _param0, _param1)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyCacheRecorder) GetDirKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDirKey", arg0, arg1)
}

func (_m *MockKeyCache) PutDirKey(_param0 DirId, _param1 KeyVer, _param2 Key) error {
	ret := _m.ctrl.Call(_m, "PutDirKey", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyCacheRecorder) PutDirKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutDirKey", arg0, arg1, arg2)
}

// Mock of BlockCache interface
type MockBlockCache struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockCacheRecorder
}

// Recorder for MockBlockCache (not exported)
type _MockBlockCacheRecorder struct {
	mock *MockBlockCache
}

func NewMockBlockCache(ctrl *gomock.Controller) *MockBlockCache {
	mock := &MockBlockCache{ctrl: ctrl}
	mock.recorder = &_MockBlockCacheRecorder{mock}
	return mock
}

func (_m *MockBlockCache) EXPECT() *_MockBlockCacheRecorder {
	return _m.recorder
}

func (_m *MockBlockCache) Get(id BlockId) (Block, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockCacheRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockBlockCache) Put(id BlockId, block Block, dirty bool) error {
	ret := _m.ctrl.Call(_m, "Put", id, block, dirty)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockBlockCache) Delete(id BlockId) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

func (_m *MockBlockCache) Finalize(oldId BlockId, newId BlockId) error {
	ret := _m.ctrl.Call(_m, "Finalize", oldId, newId)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) Finalize(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Finalize", arg0, arg1)
}

func (_m *MockBlockCache) IsDirty(id BlockId) bool {
	ret := _m.ctrl.Call(_m, "IsDirty", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBlockCacheRecorder) IsDirty(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsDirty", arg0)
}

// Mock of Crypto interface
type MockCrypto struct {
	ctrl     *gomock.Controller
	recorder *_MockCryptoRecorder
}

// Recorder for MockCrypto (not exported)
type _MockCryptoRecorder struct {
	mock *MockCrypto
}

func NewMockCrypto(ctrl *gomock.Controller) *MockCrypto {
	mock := &MockCrypto{ctrl: ctrl}
	mock.recorder = &_MockCryptoRecorder{mock}
	return mock
}

func (_m *MockCrypto) EXPECT() *_MockCryptoRecorder {
	return _m.recorder
}

func (_m *MockCrypto) Sign(buf []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Sign", buf)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Sign(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Sign", arg0)
}

func (_m *MockCrypto) Verify(sig []byte, buf []byte, key Key) error {
	ret := _m.ctrl.Call(_m, "Verify", sig, buf, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) Verify(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Verify", arg0, arg1, arg2)
}

func (_m *MockCrypto) Box(privkey Key, pubkey Key, buf []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Box", privkey, pubkey, buf)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Box(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Box", arg0, arg1, arg2)
}

func (_m *MockCrypto) Unbox(pubkey Key, buf []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Unbox", pubkey, buf)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Unbox(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Unbox", arg0, arg1)
}

func (_m *MockCrypto) Encrypt(buf []byte, key Key) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Encrypt", buf, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Encrypt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encrypt", arg0, arg1)
}

func (_m *MockCrypto) Decrypt(buf []byte, key Key) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Decrypt", buf, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Decrypt(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decrypt", arg0, arg1)
}

func (_m *MockCrypto) Hash(buf []byte) (libkb.NodeHash, error) {
	ret := _m.ctrl.Call(_m, "Hash", buf)
	ret0, _ := ret[0].(libkb.NodeHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) Hash(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Hash", arg0)
}

func (_m *MockCrypto) VerifyHash(buf []byte, hash libkb.NodeHash) error {
	ret := _m.ctrl.Call(_m, "VerifyHash", buf, hash)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) VerifyHash(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyHash", arg0, arg1)
}

func (_m *MockCrypto) SharedSecret(key1 Key, key2 Key) (Key, error) {
	ret := _m.ctrl.Call(_m, "SharedSecret", key1, key2)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) SharedSecret(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SharedSecret", arg0, arg1)
}

func (_m *MockCrypto) HMAC(secret Key, buf []byte) (HMAC, error) {
	ret := _m.ctrl.Call(_m, "HMAC", secret, buf)
	ret0, _ := ret[0].(HMAC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) HMAC(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HMAC", arg0, arg1)
}

func (_m *MockCrypto) VerifyHMAC(secret Key, buf []byte, hmac HMAC) error {
	ret := _m.ctrl.Call(_m, "VerifyHMAC", secret, buf, hmac)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCryptoRecorder) VerifyHMAC(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "VerifyHMAC", arg0, arg1, arg2)
}

func (_m *MockCrypto) XOR(key1 Key, key2 Key) (Key, error) {
	ret := _m.ctrl.Call(_m, "XOR", key1, key2)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) XOR(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "XOR", arg0, arg1)
}

func (_m *MockCrypto) GenRandomSecretKey() Key {
	ret := _m.ctrl.Call(_m, "GenRandomSecretKey")
	ret0, _ := ret[0].(Key)
	return ret0
}

func (_mr *_MockCryptoRecorder) GenRandomSecretKey() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenRandomSecretKey")
}

func (_m *MockCrypto) GenCurveKeyPair() (Key, Key) {
	ret := _m.ctrl.Call(_m, "GenCurveKeyPair")
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(Key)
	return ret0, ret1
}

func (_mr *_MockCryptoRecorder) GenCurveKeyPair() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GenCurveKeyPair")
}

// Mock of Codec interface
type MockCodec struct {
	ctrl     *gomock.Controller
	recorder *_MockCodecRecorder
}

// Recorder for MockCodec (not exported)
type _MockCodecRecorder struct {
	mock *MockCodec
}

func NewMockCodec(ctrl *gomock.Controller) *MockCodec {
	mock := &MockCodec{ctrl: ctrl}
	mock.recorder = &_MockCodecRecorder{mock}
	return mock
}

func (_m *MockCodec) EXPECT() *_MockCodecRecorder {
	return _m.recorder
}

func (_m *MockCodec) Decode(buf []byte, obj interface{}) error {
	ret := _m.ctrl.Call(_m, "Decode", buf, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCodecRecorder) Decode(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Decode", arg0, arg1)
}

func (_m *MockCodec) Encode(obj interface{}) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Encode", obj)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCodecRecorder) Encode(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Encode", arg0)
}

// Mock of MDOps interface
type MockMDOps struct {
	ctrl     *gomock.Controller
	recorder *_MockMDOpsRecorder
}

// Recorder for MockMDOps (not exported)
type _MockMDOpsRecorder struct {
	mock *MockMDOps
}

func NewMockMDOps(ctrl *gomock.Controller) *MockMDOps {
	mock := &MockMDOps{ctrl: ctrl}
	mock.recorder = &_MockMDOpsRecorder{mock}
	return mock
}

func (_m *MockMDOps) EXPECT() *_MockMDOpsRecorder {
	return _m.recorder
}

func (_m *MockMDOps) GetAtHandle(handle *DirHandle) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetAtHandle", handle)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetAtHandle(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAtHandle", arg0)
}

func (_m *MockMDOps) Get(id DirId) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockMDOps) GetAtId(id DirId, mdId MDId) (*RootMetadata, error) {
	ret := _m.ctrl.Call(_m, "GetAtId", id, mdId)
	ret0, _ := ret[0].(*RootMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetAtId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAtId", arg0, arg1)
}

func (_m *MockMDOps) Put(id DirId, md *RootMetadata) error {
	ret := _m.ctrl.Call(_m, "Put", id, md)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDOpsRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1)
}

func (_m *MockMDOps) GetFavorites() ([]DirId, error) {
	ret := _m.ctrl.Call(_m, "GetFavorites")
	ret0, _ := ret[0].([]DirId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDOpsRecorder) GetFavorites() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFavorites")
}

// Mock of KeyOps interface
type MockKeyOps struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyOpsRecorder
}

// Recorder for MockKeyOps (not exported)
type _MockKeyOpsRecorder struct {
	mock *MockKeyOps
}

func NewMockKeyOps(ctrl *gomock.Controller) *MockKeyOps {
	mock := &MockKeyOps{ctrl: ctrl}
	mock.recorder = &_MockKeyOpsRecorder{mock}
	return mock
}

func (_m *MockKeyOps) EXPECT() *_MockKeyOpsRecorder {
	return _m.recorder
}

func (_m *MockKeyOps) GetBlockKey(id BlockId) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetBlockKey", id)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyOpsRecorder) GetBlockKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBlockKey", arg0)
}

func (_m *MockKeyOps) PutBlockKey(id BlockId, key Key) error {
	ret := _m.ctrl.Call(_m, "PutBlockKey", id, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) PutBlockKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutBlockKey", arg0, arg1)
}

func (_m *MockKeyOps) DeleteBlockKey(id BlockId) error {
	ret := _m.ctrl.Call(_m, "DeleteBlockKey", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) DeleteBlockKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBlockKey", arg0)
}

func (_m *MockKeyOps) GetDirDeviceKey(id DirId, keyVer KeyVer, device KID) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetDirDeviceKey", id, keyVer, device)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyOpsRecorder) GetDirDeviceKey(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDirDeviceKey", arg0, arg1, arg2)
}

func (_m *MockKeyOps) PutDirDeviceKey(id DirId, keyVer KeyVer, user libkb.UID, device KID, key Key) error {
	ret := _m.ctrl.Call(_m, "PutDirDeviceKey", id, keyVer, user, device, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyOpsRecorder) PutDirDeviceKey(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutDirDeviceKey", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockKeyOps) GetPublicMacKey(user libkb.UID, kid libkb.KID) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetPublicMacKey", user, kid)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyOpsRecorder) GetPublicMacKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPublicMacKey", arg0, arg1)
}

func (_m *MockKeyOps) GetMyPrivateMacKey(kid libkb.KID) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetMyPrivateMacKey", kid)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyOpsRecorder) GetMyPrivateMacKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetMyPrivateMacKey", arg0)
}

// Mock of BlockOps interface
type MockBlockOps struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockOpsRecorder
}

// Recorder for MockBlockOps (not exported)
type _MockBlockOpsRecorder struct {
	mock *MockBlockOps
}

func NewMockBlockOps(ctrl *gomock.Controller) *MockBlockOps {
	mock := &MockBlockOps{ctrl: ctrl}
	mock.recorder = &_MockBlockOpsRecorder{mock}
	return mock
}

func (_m *MockBlockOps) EXPECT() *_MockBlockOpsRecorder {
	return _m.recorder
}

func (_m *MockBlockOps) Get(id BlockId, context BlockContext, decryptKey Key, block Block) error {
	ret := _m.ctrl.Call(_m, "Get", id, context, decryptKey, block)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockOps) Ready(block Block, encryptKey Key) (BlockId, int, []byte, error) {
	ret := _m.ctrl.Call(_m, "Ready", block, encryptKey)
	ret0, _ := ret[0].(BlockId)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockBlockOpsRecorder) Ready(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Ready", arg0, arg1)
}

func (_m *MockBlockOps) Put(id BlockId, context BlockContext, buf []byte) error {
	ret := _m.ctrl.Call(_m, "Put", id, context, buf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockBlockOps) Delete(id BlockId, context BlockContext) error {
	ret := _m.ctrl.Call(_m, "Delete", id, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockOpsRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

// Mock of MDServer interface
type MockMDServer struct {
	ctrl     *gomock.Controller
	recorder *_MockMDServerRecorder
}

// Recorder for MockMDServer (not exported)
type _MockMDServerRecorder struct {
	mock *MockMDServer
}

func NewMockMDServer(ctrl *gomock.Controller) *MockMDServer {
	mock := &MockMDServer{ctrl: ctrl}
	mock.recorder = &_MockMDServerRecorder{mock}
	return mock
}

func (_m *MockMDServer) EXPECT() *_MockMDServerRecorder {
	return _m.recorder
}

func (_m *MockMDServer) GetAtHandle(handle *DirHandle) (*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetAtHandle", handle)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetAtHandle(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAtHandle", arg0)
}

func (_m *MockMDServer) Get(id DirId) (*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "Get", id)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) Get(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0)
}

func (_m *MockMDServer) GetAtId(id DirId, mdId MDId) (*RootMetadataSigned, error) {
	ret := _m.ctrl.Call(_m, "GetAtId", id, mdId)
	ret0, _ := ret[0].(*RootMetadataSigned)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetAtId(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetAtId", arg0, arg1)
}

func (_m *MockMDServer) Put(id DirId, mdId MDId, md *RootMetadataSigned) error {
	ret := _m.ctrl.Call(_m, "Put", id, mdId, md)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMDServerRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockMDServer) GetFavorites() ([]DirId, error) {
	ret := _m.ctrl.Call(_m, "GetFavorites")
	ret0, _ := ret[0].([]DirId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMDServerRecorder) GetFavorites() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetFavorites")
}

// Mock of KeyServer interface
type MockKeyServer struct {
	ctrl     *gomock.Controller
	recorder *_MockKeyServerRecorder
}

// Recorder for MockKeyServer (not exported)
type _MockKeyServerRecorder struct {
	mock *MockKeyServer
}

func NewMockKeyServer(ctrl *gomock.Controller) *MockKeyServer {
	mock := &MockKeyServer{ctrl: ctrl}
	mock.recorder = &_MockKeyServerRecorder{mock}
	return mock
}

func (_m *MockKeyServer) EXPECT() *_MockKeyServerRecorder {
	return _m.recorder
}

func (_m *MockKeyServer) GetBlockKey(id BlockId) (Key, error) {
	ret := _m.ctrl.Call(_m, "GetBlockKey", id)
	ret0, _ := ret[0].(Key)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockKeyServerRecorder) GetBlockKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetBlockKey", arg0)
}

func (_m *MockKeyServer) PutBlockKey(id BlockId, key Key) error {
	ret := _m.ctrl.Call(_m, "PutBlockKey", id, key)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyServerRecorder) PutBlockKey(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "PutBlockKey", arg0, arg1)
}

func (_m *MockKeyServer) DeleteBlockKey(id BlockId) error {
	ret := _m.ctrl.Call(_m, "DeleteBlockKey", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockKeyServerRecorder) DeleteBlockKey(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteBlockKey", arg0)
}

// Mock of BlockServer interface
type MockBlockServer struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockServerRecorder
}

// Recorder for MockBlockServer (not exported)
type _MockBlockServerRecorder struct {
	mock *MockBlockServer
}

func NewMockBlockServer(ctrl *gomock.Controller) *MockBlockServer {
	mock := &MockBlockServer{ctrl: ctrl}
	mock.recorder = &_MockBlockServerRecorder{mock}
	return mock
}

func (_m *MockBlockServer) EXPECT() *_MockBlockServerRecorder {
	return _m.recorder
}

func (_m *MockBlockServer) Get(id BlockId, context BlockContext) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "Get", id, context)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockBlockServerRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Get", arg0, arg1)
}

func (_m *MockBlockServer) Put(id BlockId, context BlockContext, buf []byte) error {
	ret := _m.ctrl.Call(_m, "Put", id, context, buf)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) Put(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Put", arg0, arg1, arg2)
}

func (_m *MockBlockServer) Delete(id BlockId, context BlockContext) error {
	ret := _m.ctrl.Call(_m, "Delete", id, context)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockBlockServerRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0, arg1)
}

// Mock of BlockSplitter interface
type MockBlockSplitter struct {
	ctrl     *gomock.Controller
	recorder *_MockBlockSplitterRecorder
}

// Recorder for MockBlockSplitter (not exported)
type _MockBlockSplitterRecorder struct {
	mock *MockBlockSplitter
}

func NewMockBlockSplitter(ctrl *gomock.Controller) *MockBlockSplitter {
	mock := &MockBlockSplitter{ctrl: ctrl}
	mock.recorder = &_MockBlockSplitterRecorder{mock}
	return mock
}

func (_m *MockBlockSplitter) EXPECT() *_MockBlockSplitterRecorder {
	return _m.recorder
}

func (_m *MockBlockSplitter) CopyUntilSplit(block *FileBlock, lastBlock bool, data []byte, off int64) int64 {
	ret := _m.ctrl.Call(_m, "CopyUntilSplit", block, lastBlock, data, off)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CopyUntilSplit(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CopyUntilSplit", arg0, arg1, arg2, arg3)
}

func (_m *MockBlockSplitter) CheckSplit(block *FileBlock) int64 {
	ret := _m.ctrl.Call(_m, "CheckSplit", block)
	ret0, _ := ret[0].(int64)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) CheckSplit(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CheckSplit", arg0)
}

func (_m *MockBlockSplitter) ShouldEmbedBlockChanges(bc *BlockChanges) bool {
	ret := _m.ctrl.Call(_m, "ShouldEmbedBlockChanges", bc)
	ret0, _ := ret[0].(bool)
	return ret0
}

func (_mr *_MockBlockSplitterRecorder) ShouldEmbedBlockChanges(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ShouldEmbedBlockChanges", arg0)
}

// Mock of Observer interface
type MockObserver struct {
	ctrl     *gomock.Controller
	recorder *_MockObserverRecorder
}

// Recorder for MockObserver (not exported)
type _MockObserverRecorder struct {
	mock *MockObserver
}

func NewMockObserver(ctrl *gomock.Controller) *MockObserver {
	mock := &MockObserver{ctrl: ctrl}
	mock.recorder = &_MockObserverRecorder{mock}
	return mock
}

func (_m *MockObserver) EXPECT() *_MockObserverRecorder {
	return _m.recorder
}

func (_m *MockObserver) LocalChange(path Path) {
	_m.ctrl.Call(_m, "LocalChange", path)
}

func (_mr *_MockObserverRecorder) LocalChange(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LocalChange", arg0)
}

func (_m *MockObserver) BatchChanges(dir DirId, paths []Path) {
	_m.ctrl.Call(_m, "BatchChanges", dir, paths)
}

func (_mr *_MockObserverRecorder) BatchChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BatchChanges", arg0, arg1)
}

// Mock of Notifier interface
type MockNotifier struct {
	ctrl     *gomock.Controller
	recorder *_MockNotifierRecorder
}

// Recorder for MockNotifier (not exported)
type _MockNotifierRecorder struct {
	mock *MockNotifier
}

func NewMockNotifier(ctrl *gomock.Controller) *MockNotifier {
	mock := &MockNotifier{ctrl: ctrl}
	mock.recorder = &_MockNotifierRecorder{mock}
	return mock
}

func (_m *MockNotifier) EXPECT() *_MockNotifierRecorder {
	return _m.recorder
}

func (_m *MockNotifier) RegisterForChanges(dirs []DirId, obs Observer) error {
	ret := _m.ctrl.Call(_m, "RegisterForChanges", dirs, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) RegisterForChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RegisterForChanges", arg0, arg1)
}

func (_m *MockNotifier) UnregisterFromChanges(dirs []DirId, obs Observer) error {
	ret := _m.ctrl.Call(_m, "UnregisterFromChanges", dirs, obs)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockNotifierRecorder) UnregisterFromChanges(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnregisterFromChanges", arg0, arg1)
}

// Mock of Config interface
type MockConfig struct {
	ctrl     *gomock.Controller
	recorder *_MockConfigRecorder
}

// Recorder for MockConfig (not exported)
type _MockConfigRecorder struct {
	mock *MockConfig
}

func NewMockConfig(ctrl *gomock.Controller) *MockConfig {
	mock := &MockConfig{ctrl: ctrl}
	mock.recorder = &_MockConfigRecorder{mock}
	return mock
}

func (_m *MockConfig) EXPECT() *_MockConfigRecorder {
	return _m.recorder
}

func (_m *MockConfig) KBFSOps() KBFSOps {
	ret := _m.ctrl.Call(_m, "KBFSOps")
	ret0, _ := ret[0].(KBFSOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KBFSOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBFSOps")
}

func (_m *MockConfig) SetKBFSOps(_param0 KBFSOps) {
	_m.ctrl.Call(_m, "SetKBFSOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKBFSOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBFSOps", arg0)
}

func (_m *MockConfig) KBPKI() KBPKI {
	ret := _m.ctrl.Call(_m, "KBPKI")
	ret0, _ := ret[0].(KBPKI)
	return ret0
}

func (_mr *_MockConfigRecorder) KBPKI() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KBPKI")
}

func (_m *MockConfig) SetKBPKI(_param0 KBPKI) {
	_m.ctrl.Call(_m, "SetKBPKI", _param0)
}

func (_mr *_MockConfigRecorder) SetKBPKI(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKBPKI", arg0)
}

func (_m *MockConfig) KeyManager() KeyManager {
	ret := _m.ctrl.Call(_m, "KeyManager")
	ret0, _ := ret[0].(KeyManager)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyManager() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyManager")
}

func (_m *MockConfig) SetKeyManager(_param0 KeyManager) {
	_m.ctrl.Call(_m, "SetKeyManager", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyManager(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyManager", arg0)
}

func (_m *MockConfig) Reporter() Reporter {
	ret := _m.ctrl.Call(_m, "Reporter")
	ret0, _ := ret[0].(Reporter)
	return ret0
}

func (_mr *_MockConfigRecorder) Reporter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Reporter")
}

func (_m *MockConfig) SetReporter(_param0 Reporter) {
	_m.ctrl.Call(_m, "SetReporter", _param0)
}

func (_mr *_MockConfigRecorder) SetReporter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetReporter", arg0)
}

func (_m *MockConfig) MDCache() MDCache {
	ret := _m.ctrl.Call(_m, "MDCache")
	ret0, _ := ret[0].(MDCache)
	return ret0
}

func (_mr *_MockConfigRecorder) MDCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDCache")
}

func (_m *MockConfig) SetMDCache(_param0 MDCache) {
	_m.ctrl.Call(_m, "SetMDCache", _param0)
}

func (_mr *_MockConfigRecorder) SetMDCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDCache", arg0)
}

func (_m *MockConfig) KeyCache() KeyCache {
	ret := _m.ctrl.Call(_m, "KeyCache")
	ret0, _ := ret[0].(KeyCache)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyCache")
}

func (_m *MockConfig) SetKeyCache(_param0 KeyCache) {
	_m.ctrl.Call(_m, "SetKeyCache", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyCache", arg0)
}

func (_m *MockConfig) BlockCache() BlockCache {
	ret := _m.ctrl.Call(_m, "BlockCache")
	ret0, _ := ret[0].(BlockCache)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockCache() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockCache")
}

func (_m *MockConfig) SetBlockCache(_param0 BlockCache) {
	_m.ctrl.Call(_m, "SetBlockCache", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockCache(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockCache", arg0)
}

func (_m *MockConfig) Crypto() Crypto {
	ret := _m.ctrl.Call(_m, "Crypto")
	ret0, _ := ret[0].(Crypto)
	return ret0
}

func (_mr *_MockConfigRecorder) Crypto() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Crypto")
}

func (_m *MockConfig) SetCrypto(_param0 Crypto) {
	_m.ctrl.Call(_m, "SetCrypto", _param0)
}

func (_mr *_MockConfigRecorder) SetCrypto(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCrypto", arg0)
}

func (_m *MockConfig) Codec() Codec {
	ret := _m.ctrl.Call(_m, "Codec")
	ret0, _ := ret[0].(Codec)
	return ret0
}

func (_mr *_MockConfigRecorder) Codec() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Codec")
}

func (_m *MockConfig) SetCodec(_param0 Codec) {
	_m.ctrl.Call(_m, "SetCodec", _param0)
}

func (_mr *_MockConfigRecorder) SetCodec(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetCodec", arg0)
}

func (_m *MockConfig) MDOps() MDOps {
	ret := _m.ctrl.Call(_m, "MDOps")
	ret0, _ := ret[0].(MDOps)
	return ret0
}

func (_mr *_MockConfigRecorder) MDOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDOps")
}

func (_m *MockConfig) SetMDOps(_param0 MDOps) {
	_m.ctrl.Call(_m, "SetMDOps", _param0)
}

func (_mr *_MockConfigRecorder) SetMDOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDOps", arg0)
}

func (_m *MockConfig) KeyOps() KeyOps {
	ret := _m.ctrl.Call(_m, "KeyOps")
	ret0, _ := ret[0].(KeyOps)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyOps")
}

func (_m *MockConfig) SetKeyOps(_param0 KeyOps) {
	_m.ctrl.Call(_m, "SetKeyOps", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyOps", arg0)
}

func (_m *MockConfig) BlockOps() BlockOps {
	ret := _m.ctrl.Call(_m, "BlockOps")
	ret0, _ := ret[0].(BlockOps)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockOps() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockOps")
}

func (_m *MockConfig) SetBlockOps(_param0 BlockOps) {
	_m.ctrl.Call(_m, "SetBlockOps", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockOps(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockOps", arg0)
}

func (_m *MockConfig) MDServer() MDServer {
	ret := _m.ctrl.Call(_m, "MDServer")
	ret0, _ := ret[0].(MDServer)
	return ret0
}

func (_mr *_MockConfigRecorder) MDServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MDServer")
}

func (_m *MockConfig) SetMDServer(_param0 MDServer) {
	_m.ctrl.Call(_m, "SetMDServer", _param0)
}

func (_mr *_MockConfigRecorder) SetMDServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetMDServer", arg0)
}

func (_m *MockConfig) KeyServer() KeyServer {
	ret := _m.ctrl.Call(_m, "KeyServer")
	ret0, _ := ret[0].(KeyServer)
	return ret0
}

func (_mr *_MockConfigRecorder) KeyServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "KeyServer")
}

func (_m *MockConfig) SetKeyServer(_param0 KeyServer) {
	_m.ctrl.Call(_m, "SetKeyServer", _param0)
}

func (_mr *_MockConfigRecorder) SetKeyServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetKeyServer", arg0)
}

func (_m *MockConfig) BlockServer() BlockServer {
	ret := _m.ctrl.Call(_m, "BlockServer")
	ret0, _ := ret[0].(BlockServer)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockServer() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockServer")
}

func (_m *MockConfig) SetBlockServer(_param0 BlockServer) {
	_m.ctrl.Call(_m, "SetBlockServer", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockServer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockServer", arg0)
}

func (_m *MockConfig) BlockSplitter() BlockSplitter {
	ret := _m.ctrl.Call(_m, "BlockSplitter")
	ret0, _ := ret[0].(BlockSplitter)
	return ret0
}

func (_mr *_MockConfigRecorder) BlockSplitter() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BlockSplitter")
}

func (_m *MockConfig) SetBlockSplitter(_param0 BlockSplitter) {
	_m.ctrl.Call(_m, "SetBlockSplitter", _param0)
}

func (_mr *_MockConfigRecorder) SetBlockSplitter(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetBlockSplitter", arg0)
}

func (_m *MockConfig) Notifier() Notifier {
	ret := _m.ctrl.Call(_m, "Notifier")
	ret0, _ := ret[0].(Notifier)
	return ret0
}

func (_mr *_MockConfigRecorder) Notifier() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Notifier")
}

func (_m *MockConfig) SetNotifier(_param0 Notifier) {
	_m.ctrl.Call(_m, "SetNotifier", _param0)
}

func (_mr *_MockConfigRecorder) SetNotifier(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SetNotifier", arg0)
}

func (_m *MockConfig) DataVersion() Ver {
	ret := _m.ctrl.Call(_m, "DataVersion")
	ret0, _ := ret[0].(Ver)
	return ret0
}

func (_mr *_MockConfigRecorder) DataVersion() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DataVersion")
}

func (_m *MockConfig) ReqsBufSize() int {
	ret := _m.ctrl.Call(_m, "ReqsBufSize")
	ret0, _ := ret[0].(int)
	return ret0
}

func (_mr *_MockConfigRecorder) ReqsBufSize() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReqsBufSize")
}
